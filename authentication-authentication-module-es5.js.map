{"version":3,"sources":["webpack:///src/app/authentication/authentication.module.ts","webpack:///src/app/authentication/authentication.routing.ts","webpack:///src/app/authentication/error/error.component.ts","webpack:///src/app/authentication/error/error.component.html","webpack:///src/app/authentication/forgot/forgot.component.ts","webpack:///src/app/authentication/forgot/forgot.component.html","webpack:///src/app/authentication/lockscreen/lockscreen.component.ts","webpack:///src/app/authentication/lockscreen/lockscreen.component.html","webpack:///src/app/authentication/login/login.component.ts","webpack:///src/app/authentication/login/login.component.html","webpack:///src/app/authentication/register/register.component.ts","webpack:///src/app/authentication/register/register.component.html"],"names":["AuthenticationModule","forChild","imports","declarations","AuthenticationRoutes","path","children","component","ErrorComponent","selector","templateUrl","styleUrls","ForgotComponent","fb","router","form","group","email","compose","required","navigate","onSubmit","LockscreenComponent","uname","LoginComponent","password","confirmPassword","equalTo","RegisterComponent"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAiDaA,oB;;;;;YAAAA;;;;yBAAAA,oB;AAAoB,O;AAAA,gBApBpB,CACL,4DADK,EAEL,6DAAaC,QAAb,CAAsB,6EAAtB,CAFK,EAGL,oEAHK,EAIL,oEAJK,EAKL,sEALK,EAML,4EANK,EAOL,wEAPK,EAQL,qEARK,EASL,0DATK,EAUL,kEAVK,CAoBoB;;;;0HAApBD,oB,EAAoB;AAAA,uBAPzB,sEAOyB,EANzB,yEAMyB,EALzB,qFAKyB,EAJzB,sEAIyB,EAHzB,+EAGyB;AAHR,kBAhBjB,4DAgBiB,EAhBL,4DAgBK,EAdjB,oEAciB,EAbjB,oEAaiB,EAZjB,sEAYiB,EAXjB,4EAWiB,EAVjB,wEAUiB,EATjB,qEASiB,EARjB,0DAQiB,EAPjB,kEAOiB;AAGQ,O;AAVN,K;;;;;sEAUdA,oB,EAAoB;cArBhC,sDAqBgC;eArBvB;AACNE,iBAAO,EAAE,CACL,4DADK,EAEL,6DAAaD,QAAb,CAAsB,6EAAtB,CAFK,EAGL,oEAHK,EAIL,oEAJK,EAKL,sEALK,EAML,4EANK,EAOL,wEAPK,EAQL,qEARK,EASL,0DATK,EAUL,kEAVK,CADH;AAaNE,sBAAY,EAAE,CACV,sEADU,EAEV,yEAFU,EAGV,qFAHU,EAIV,sEAJU,EAKV,+EALU;AAbR,S;AAqBuB,Q;;;;;;;;;;;;;;;;;;AC/CjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAKO,QAAMC,oBAAoB,GAAW,CAC1C;AACEC,UAAI,EAAE,EADR;AAEEC,cAAQ,EAAE,CACR;AACED,YAAI,EAAE,KADR;AAEEE,iBAAS,EAAE;AAFb,OADQ,EAKR;AACEF,YAAI,EAAE,QADR;AAEEE,iBAAS,EAAE;AAFb,OALQ,EASR;AACEF,YAAI,EAAE,YADR;AAEEE,iBAAS,EAAE;AAFb,OATQ,EAaR;AACEF,YAAI,EAAE,OADR;AAEEE,iBAAS,EAAE;AAFb,OAbQ,EAiBR;AACEF,YAAI,EAAE,UADR;AAEEE,iBAAS,EAAE;AAFb,OAjBQ;AAFZ,KAD0C,CAArC;;;;;;;;;;;;;;;;ACPP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;QAOaC,c;;;AACX,gCAAc;AAAA;AAAE;;;;mCAEL,CAAE;;;;;;;uBAHFA,c;AAAc,K;;;YAAdA,c;AAAc,gC;AAAA,e;AAAA,a;AAAA,yS;AAAA;AAAA;ACP3B;;AACI;;AACI;;AAAI;;AAAG;;AACP;;AAA2B;;AAAgB;;AAC3C;;AAAoC;;AAA8C;;AAClF;;AAA2H;;AAAY;;AAC3I;;AACJ;;;;AAF6C;;AAAA;;;;;;;;;sEDEhCA,c,EAAc;cAL1B,uDAK0B;eALhB;AACTC,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;AEP3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACgBc;;AAA8H;;AAAkC;;;;;;AAChK;;AAAuH;;AAAuC;;;;QDD/JC,e;;;AAEX,+BAAoBC,EAApB,EAA6CC,MAA7C,EAA6D;AAAA;;AAAzC,aAAAD,EAAA,GAAAA,EAAA;AAAyB,aAAAC,MAAA,GAAAA,MAAA;AAAkB;;;;mCAEpD;AACT,eAAKC,IAAL,GAAY,KAAKF,EAAL,CAAQG,KAAR,CAAc;AACxBC,iBAAK,EAAE,CACL,IADK,EAEL,0DAAWC,OAAX,CAAmB,CAAC,0DAAWC,QAAZ,EAAsB,uEAAiBF,KAAvC,CAAnB,CAFK;AADiB,WAAd,CAAZ;AAMD;;;mCAEU;AACT,eAAKH,MAAL,CAAYM,QAAZ,CAAqB,CAAC,uBAAD,CAArB;AACD;;;;;;;uBAfUR,e,EAAe,2H,EAAA,uH;AAAA,K;;;YAAfA,e;AAAe,iC;AAAA,e;AAAA,a;AAAA,qlB;AAAA;AAAA;AChB5B;;AACE;;AACE;;AACE;;AACE;;AAAyB;AAAA,mBAAY,IAAAS,QAAA,EAAZ;AAAsB,WAAtB;;AACvB;;AACE;;AACA;;AAAkB;;AAAgB;;AACpC;;AACA;;AAA+B;;AAA4D;;AAE3F;;AACE;;AACE;;AACE;;AACF;;AACA;;AACA;;AACF;;AACA;;AAAiH;;AAAM;;AACzH;;AAEF;;AACF;;AACF;;AACF;;AACF;;;;AAtBc;;AAAA;;AAU2D;;AAAA;;AAEpD;;AAAA;;AACA;;AAAA;;AAE+E;;AAAA;;;;;;;;;sEDHvFT,e,EAAe;cAL3B,uDAK2B;eALjB;AACTH,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,yBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEhB5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACgBc;;AAA8H;;AAAqB;;;;QDFpJW,mB;;;AAEX,mCAAoBT,EAApB,EAA6CC,MAA7C,EAA6D;AAAA;;AAAzC,aAAAD,EAAA,GAAAA,EAAA;AAAyB,aAAAC,MAAA,GAAAA,MAAA;AAAkB;;;;mCAEpD;AACT,eAAKC,IAAL,GAAY,KAAKF,EAAL,CAAQG,KAAR,CAAc;AACxBO,iBAAK,EAAE,CAAC,IAAD,EAAO,0DAAWL,OAAX,CAAmB,CAAC,0DAAWC,QAAZ,CAAnB,CAAP;AADiB,WAAd,CAAZ;AAGD;;;mCAEU;AACT,eAAKL,MAAL,CAAYM,QAAZ,CAAqB,CAAC,GAAD,CAArB;AACD;;;;;;;uBAZUE,mB,EAAmB,2H,EAAA,uH;AAAA,K;;;YAAnBA,mB;AAAmB,qC;AAAA,e;AAAA,a;AAAA,0mB;AAAA;AAAA;ACdhC;;AACE;;AACE;;AACE;;AACE;;AAAyB;AAAA,mBAAY,IAAAD,QAAA,EAAZ;AAAsB,WAAtB;;AACvB;;AACE;;AACA;;AAAkB;;AAAY;;AAChC;;AAEA;;AAEE;;AACE;;AACE;;AACF;;AACA;;AACF;;AAEA;;AACE;;AAAwH;;AAAM;;AAChI;;AACF;;AACF;;AACF;;AACF;;AACF;;AACF;;;;AAvBc;;AAAA;;AAUyC;;AAAA;;AAElC;;AAAA;;AAIwF;;AAAA;;;;;;;;;sEDNhGC,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACTb,kBAAQ,EAAE,gBADD;AAETC,qBAAW,EAAE,6BAFJ;AAGTC,mBAAS,EAAE,CAAC,6BAAD;AAHF,S;AAKqB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEdhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACgB4B;;AAA8H;;AAAqB;;;;;;AAOnJ;;AAAoI;;AAAqB;;;;;;;;;;;;QDTxKa,c;;;AAEX,8BAAoBX,EAApB,EAA6CC,MAA7C,EAA6D;AAAA;;AAAzC,aAAAD,EAAA,GAAAA,EAAA;AAAyB,aAAAC,MAAA,GAAAA,MAAA;AAAkB;;;;mCAEpD;AACT,eAAKC,IAAL,GAAY,KAAKF,EAAL,CAAQG,KAAR,CAAc;AACxBO,iBAAK,EAAE,CAAC,IAAD,EAAO,0DAAWL,OAAX,CAAmB,CAAC,0DAAWC,QAAZ,CAAnB,CAAP,CADiB;AAExBM,oBAAQ,EAAE,CAAC,IAAD,EAAO,0DAAWP,OAAX,CAAmB,CAAC,0DAAWC,QAAZ,CAAnB,CAAP;AAFc,WAAd,CAAZ;AAID;;;mCAEU;AACT,eAAKL,MAAL,CAAYM,QAAZ,CAAqB,CAAC,wBAAD,CAArB;AACD;;;;;;;uBAbUI,c,EAAc,2H,EAAA,uH;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA,e;AAAA,c;AAAA,w5B;AAAA;AAAA;ACd3B;;AACI;;AACI;;AACI;;AACI;;AAAyB;AAAA,mBAAY,IAAAH,QAAA,EAAZ;AAAsB,WAAtB;;AACrB;;AACI;;AACA;;AAAkB;;AAAY;;AAClC;;AAEA;;AAEI;;AACI;;AACI;;AACJ;;AACA;;AACJ;;AAEA;;AACI;;AACI;;AACJ;;AACA;;AACJ;;AAEA;;AACI;;AAA2B;;AAAW;;AAC1C;;AAEA;;AACI;;AAA0D;;AAAW;;AACzE;;AAEA;;AACI;;AAAwH;;AAAK;;AACjI;;AAEA;;AACI;;AAAM;;AACF;;AAAsE;;AAAQ;;AAClF;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;;;AA5CsB;;AAAA;;AAUiD;;AAAA;;AAEpC;;AAAA;;AAKoD;;AAAA;;AAEpD;;AAAA;;AAQJ;;AAAA;;AAI4F;;AAAA;;AAKxF;;AAAA;;;;;;;;;sED1BtBG,c,EAAc;cAL1B,uDAK0B;eALhB;AACTf,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEd3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACec;;AAA8H;;AAAkC;;;;;;AAChK;;AAAuH;;AAAuC;;;;;;AAO9J;;AAAoI;;AAA0B;;;;;;AAO9J;;AAAkJ;;AAAkC;;;;;;AACpL;;AAAiG;;AAAsB;;;;;;;;ADpBrI,QAAMc,QAAQ,GAAG,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,0DAAWN,QAA/B,CAAjB;AACA,QAAMO,eAAe,GAAG,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,uEAAiBC,OAAjB,CAAyBF,QAAzB,CAApB,CAAxB;;QAOaG,iB;;;AAEX,iCAAoBf,EAApB,EAA6CC,MAA7C,EAA6D;AAAA;;AAAzC,aAAAD,EAAA,GAAAA,EAAA;AAAyB,aAAAC,MAAA,GAAAA,MAAA;AAAkB;;;;mCAEpD;AACT,eAAKC,IAAL,GAAY,KAAKF,EAAL,CAAQG,KAAR,CAAc;AACxBC,iBAAK,EAAE,CACL,IADK,EAEL,0DAAWC,OAAX,CAAmB,CAAC,0DAAWC,QAAZ,EAAsB,uEAAiBF,KAAvC,CAAnB,CAFK,CADiB;AAKxBQ,oBAAQ,EAAEA,QALc;AAMxBC,2BAAe,EAAEA;AANO,WAAd,CAAZ;AAQD;;;mCAEU;AACT,eAAKZ,MAAL,CAAYM,QAAZ,CAAqB,CAAC,GAAD,CAArB;AACD;;;;;;;uBAjBUQ,iB,EAAiB,2H,EAAA,uH;AAAA,K;;;YAAjBA,iB;AAAiB,mC;AAAA,e;AAAA,c;AAAA,y8B;AAAA;AAAA;ACnB9B;;AACE;;AACE;;AACE;;AACE;;AAAyB;AAAA,mBAAY,IAAAP,QAAA,EAAZ;AAAsB,WAAtB;;AACvB;;AACE;;AACA;;AAAkB;;AAAe;;AACnC;;AACA;;AAEE;;AACE;;AACE;;AACF;;AACA;;AACA;;AACF;;AAEA;;AACE;;AACE;;AACF;;AACA;;AACF;;AAEA;;AACE;;AACE;;AACF;;AACA;;AACA;;AACF;;AAEA;;AACE;;AAA8B;;AAC5B;;AAAoD;;AAAK;;AAAI;;AAAC;;AAClE;;AACA;;AAAwH;;AAAmB;;AAE3I;;AACE;;AAAM;;AACJ;;AAAoE;;AAAK;;AAC3E;;AACF;;AACF;;AACF;;AACF;;AACF;;AACF;;AACF;;;;AA9Cc;;AAAA;;AAS2D;;AAAA;;AAEpD;;AAAA;;AACA;;AAAA;;AAKkD;;AAAA;;AAElD;;AAAA;;AAK0C;;AAAA;;AAE1C;;AAAA;;AACA;;AAAA;;AAOsF;;AAAA;;AAIxF;;AAAA;;;;;;;;;sEDvBNO,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACTnB,kBAAQ,EAAE,cADD;AAETC,qBAAW,EAAE,2BAFJ;AAGTC,mBAAS,EAAE,CAAC,2BAAD;AAHF,S;AAKmB,Q","file":"authentication-authentication-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n    MatIconModule\r\n} from '@angular/material/icon';\r\nimport {\r\n    MatCardModule,\r\n} from '@angular/material/card';\r\nimport {\r\n    MatInputModule\r\n} from '@angular/material/input';\r\nimport {\r\n    MatCheckboxModule\r\n} from '@angular/material/checkbox';\r\nimport {\r\n    MatButtonModule\r\n} from '@angular/material/button';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\n\r\nimport { AuthenticationRoutes } from './authentication.routing';\r\nimport { ErrorComponent } from './error/error.component';\r\nimport { ForgotComponent } from './forgot/forgot.component';\r\nimport { LockscreenComponent } from './lockscreen/lockscreen.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        RouterModule.forChild(AuthenticationRoutes),\r\n        MatIconModule,\r\n        MatCardModule,\r\n        MatInputModule,\r\n        MatCheckboxModule,\r\n        MatButtonModule,\r\n        FlexLayoutModule,\r\n        FormsModule,\r\n        ReactiveFormsModule\r\n    ],\r\n    declarations: [\r\n        ErrorComponent,\r\n        ForgotComponent,\r\n        LockscreenComponent,\r\n        LoginComponent,\r\n        RegisterComponent\r\n    ]\r\n})\r\nexport class AuthenticationModule { }\r\n","import { Routes } from '@angular/router';\r\n\r\nimport { ErrorComponent } from './error/error.component';\r\nimport { ForgotComponent } from './forgot/forgot.component';\r\nimport { LockscreenComponent } from './lockscreen/lockscreen.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nexport const AuthenticationRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    children: [\r\n      {\r\n        path: '404',\r\n        component: ErrorComponent\r\n      },\r\n      {\r\n        path: 'forgot',\r\n        component: ForgotComponent\r\n      },\r\n      {\r\n        path: 'lockscreen',\r\n        component: LockscreenComponent\r\n      },\r\n      {\r\n        path: 'login',\r\n        component: LoginComponent\r\n      },\r\n      {\r\n        path: 'register',\r\n        component: RegisterComponent\r\n      }\r\n    ]\r\n  }\r\n];\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-error',\r\n  templateUrl: './error.component.html',\r\n  styleUrls: ['./error.component.scss']\r\n})\r\nexport class ErrorComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","<div class=\"login-register\">\r\n    <div class=\"login-register-box error-card text-center\">\r\n        <h1>404</h1>\r\n        <h3 class=\"text-uppercase\">Page Not Found !</h3>\r\n        <p class=\"text-muted m-t-30 m-b-30\">You seem to be trying to find this way to home</p>\r\n        <a mat-raised-button color=\"primary\" [routerLink]=\"['/']\" class=\"btn btn-info btn-rounded waves-effect waves-light m-b-40\">Back to home</a>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n  FormControl\r\n} from '@angular/forms';\r\nimport { CustomValidators  } from 'ngx-custom-validators';\r\n\r\n\r\n@Component({\r\n  selector: 'app-forgot',\r\n  templateUrl: './forgot.component.html',\r\n  styleUrls: ['./forgot.component.scss']\r\n})\r\nexport class ForgotComponent implements OnInit {\r\n  public form: FormGroup;\r\n  constructor(private fb: FormBuilder, private router: Router) {}\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.group({\r\n      email: [\r\n        null,\r\n        Validators.compose([Validators.required, CustomValidators.email])\r\n      ]\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.router.navigate(['/authentication/login']);\r\n  }\r\n}\r\n","<div class=\"login-register\">\r\n  <div class=\"login-register-box\">\r\n    <mat-card>\r\n      <mat-card-content>\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n          <div class=\"text-center\">\r\n            <img alt=\"homepage\" src=\"assets/images/logo-icon.png\">\r\n            <h4 class=\"m-t-0\">Recover Password</h4>\r\n          </div>\r\n          <p class=\"text-center font-14\">Enter your email and we'll send you the password reset link.</p>\r\n\r\n          <div fxLayout=\"column\" fxLayoutAlign=\"space-around\">\r\n            <div class=\"pb-1\">\r\n              <mat-form-field style=\"width: 100%\">\r\n                <input matInput placeholder=\"Email address\" type=\"email\" [formControl]=\"form.controls['email']\">\r\n              </mat-form-field>\r\n              <small *ngIf=\"form.controls['email'].hasError('required') && form.controls['email'].touched\" class=\"text-danger support-text\">You must include an email address.</small>\r\n              <small *ngIf=\"form.controls['email'].errors?.email && form.controls['email'].touched\" class=\"text-danger support-text\">You must include a valid email address.</small>\r\n            </div>\r\n            <button mat-raised-button color=\"primary\" type=\"submit\" class=\"btn-block btn-lg m-t-20\" [disabled]=\"!form.valid\">Submit</button>\r\n          </div>\r\n\r\n        </form>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n  FormControl\r\n} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-lockscreen',\r\n  templateUrl: './lockscreen.component.html',\r\n  styleUrls: ['./lockscreen.component.scss']\r\n})\r\nexport class LockscreenComponent implements OnInit {\r\n  public form: FormGroup;\r\n  constructor(private fb: FormBuilder, private router: Router) {}\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.group({\r\n      uname: [null, Validators.compose([Validators.required])]\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.router.navigate(['/']);\r\n  }\r\n}\r\n","<div class=\"login-register\">\r\n  <div class=\"login-register-box\">\r\n    <mat-card>\r\n      <mat-card-content>\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n          <div class=\"text-center\">\r\n            <img src=\"assets/images/users/1.jpg\" class=\"img-circle\" width=\"80\" alt=\"user\" title=\"user\" />\r\n            <h4 class=\"m-t-0\">David Miller</h4>\r\n          </div>\r\n\r\n          <div fxLayout=\"row wrap\">\r\n            <!-- col full-->\r\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n              <mat-form-field style=\"width: 100%\">\r\n                <input matInput placeholder=\"Username\" [formControl]=\"form.controls['uname']\">\r\n              </mat-form-field>\r\n              <small *ngIf=\"form.controls['uname'].hasError('required') && form.controls['uname'].touched\" class=\"text-danger support-text\">Username is required.</small>\r\n            </div>\r\n            <!-- col full-->\r\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n              <button mat-raised-button class=\"btn-block btn-lg m-t-10 m-b-10\" color=\"primary\" type=\"submit\" [disabled]=\"!form.valid\">Unlock</button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n  FormControl\r\n} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  public form: FormGroup;\r\n  constructor(private fb: FormBuilder, private router: Router) {}\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.group({\r\n      uname: [null, Validators.compose([Validators.required])],\r\n      password: [null, Validators.compose([Validators.required])]\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.router.navigate(['/dashboards/dashboard1']);\r\n  }\r\n}\r\n","<div class=\"login-register\">\r\n    <div class=\"login-register-box\">\r\n        <mat-card>\r\n            <mat-card-content>\r\n                <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n                    <div class=\"text-center\">\r\n                        <img alt=\"homepage\" src=\"assets/images/logo-icon.png\">\r\n                        <h4 class=\"m-t-0\">Login to App</h4>\r\n                    </div>\r\n\r\n                    <div fxLayout=\"row wrap\">\r\n                        <!-- col full-->\r\n                        <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n                            <mat-form-field>\r\n                                <input matInput placeholder=\"Username\" [formControl]=\"form.controls['uname']\">\r\n                            </mat-form-field>\r\n                            <small *ngIf=\"form.controls['uname'].hasError('required') && form.controls['uname'].touched\" class=\"text-danger support-text\">Username is required.</small>\r\n                        </div>\r\n                        <!-- col full-->\r\n                        <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n                            <mat-form-field>\r\n                                <input matInput type=\"password\" placeholder=\"Password\" [formControl]=\"form.controls['password']\">\r\n                            </mat-form-field>\r\n                            <small *ngIf=\"form.controls['password'].hasError('required') && form.controls['password'].touched\" class=\"text-danger support-text\">Password is required.</small>\r\n                        </div>\r\n                        <!-- col half-->\r\n                        <div fxFlex.gt-sm=\"50\" fxFlex.gt-xs=\"50\">\r\n                            <mat-checkbox color=\"warn\">Remember me</mat-checkbox>\r\n                        </div>\r\n                        <!-- col half-->\r\n                        <div fxFlex.gt-sm=\"50\" fxFlex.gt-xs=\"50\" class=\"text-right\">\r\n                            <a [routerLink]=\"['/authentication/forgot']\" class=\"link\">Forgot pwd?</a>\r\n                        </div>\r\n                        <!-- col full-->\r\n                        <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n                            <button mat-raised-button color=\"primary\" class=\"btn-block btn-lg m-t-20 m-b-20\" type=\"submit\" [disabled]=\"!form.valid\">Login</button>\r\n                        </div>\r\n                        <!-- col full-->\r\n                        <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\" class=\"text-center\">\r\n                            <span>Don't have an account?\r\n                                <a [routerLink]=\"['/authentication/register']\" class=\"text-info link\">Register</a>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </mat-card-content>\r\n        </mat-card>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n  FormControl\r\n} from '@angular/forms';\r\nimport { CustomValidators  } from 'ngx-custom-validators';\r\n\r\n\r\nconst password = new FormControl('', Validators.required);\r\nconst confirmPassword = new FormControl('', CustomValidators.equalTo(password));\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  public form: FormGroup;\r\n  constructor(private fb: FormBuilder, private router: Router) {}\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.group({\r\n      email: [\r\n        null,\r\n        Validators.compose([Validators.required, CustomValidators.email])\r\n      ],\r\n      password: password,\r\n      confirmPassword: confirmPassword\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.router.navigate(['/']);\r\n  }\r\n}\r\n","<div class=\"login-register\" >\r\n  <div class=\"login-register-box\">\r\n    <mat-card>\r\n      <mat-card-content>\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n          <div class=\"text-center\">\r\n            <img alt=\"homepage\" src=\"assets/images/logo-icon.png\">\r\n            <h4 class=\"m-t-0\">Register to App</h4>\r\n          </div>\r\n          <div fxLayout=\"row wrap\">\r\n            <!-- col full-->\r\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n              <mat-form-field style=\"width: 100%\">\r\n                <input matInput placeholder=\"Email address\" type=\"email\" [formControl]=\"form.controls['email']\">\r\n              </mat-form-field>\r\n              <small *ngIf=\"form.controls['email'].hasError('required') && form.controls['email'].touched\" class=\"text-danger support-text\">You must include an email address.</small>\r\n              <small *ngIf=\"form.controls['email'].errors?.email && form.controls['email'].touched\" class=\"text-danger support-text\">You must include a valid email address.</small>\r\n            </div>\r\n            <!-- col full-->\r\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n              <mat-form-field style=\"width: 100%\">\r\n                <input matInput type=\"password\" placeholder=\"Password\" [formControl]=\"form.controls['password']\">\r\n              </mat-form-field>\r\n              <small *ngIf=\"form.controls['password'].hasError('required') && form.controls['password'].touched\" class=\"text-danger support-text\">You must include password.</small>\r\n            </div>\r\n            <!-- col full-->\r\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n              <mat-form-field style=\"width: 100%\">\r\n                <input matInput placeholder=\"Confirm Password\" [formControl]=\"form.controls['confirmPassword']\" type=\"password\">\r\n              </mat-form-field>\r\n              <small *ngIf=\"form.controls['confirmPassword'].hasError('required') && form.controls['confirmPassword'].touched\" class=\"text-danger support-text\">You must include confirm password.</small>\r\n              <small *ngIf=\"form.controls['confirmPassword'].errors?.equalTo\" class=\"text-danger support-text\">Passwords do not math.</small>\r\n            </div>\r\n            <!-- col full-->\r\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n              <mat-checkbox class=\"font-14\">I agree to the all\r\n                <a href=\"javascript:void(0)\" class=\"link text-info\">terms</a>.</mat-checkbox>\r\n            </div>\r\n            <button mat-raised-button color=\"primary\" class=\"btn-block btn-lg m-t-20 m-b-20\" type=\"submit\" [disabled]=\"!form.valid\">Create your account</button>\r\n\r\n            <div class=\"text-center\" fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n              <span>Already have an account?\r\n                <a [routerLink]=\"['/authentication/login']\" class=\"link text-info\"> Login</a>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>"]}