{"version":3,"sources":["./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/tree.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/tree.js","./src/app/tree/check-tree/check-tree.component.ts","./src/app/tree/check-tree/check-tree.component.html","./src/app/tree/dynamic-tree/dynamic-tree.component.ts","./src/app/tree/dynamic-tree/dynamic-tree.component.html","./src/app/tree/flat-tree/flat-tree.component.ts","./src/app/tree/flat-tree/flat-tree.component.html","./src/app/tree/load-tree/load-tree.component.ts","./src/app/tree/load-tree/load-tree.component.html","./src/app/tree/nested-tree/nested-tree.component.ts","./src/app/tree/nested-tree/nested-tree.component.html","./src/app/tree/tree.module.ts","./src/app/tree/tree.routing.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwE;AACN;AACT;AAC+N;AACrO;AACiC;AACnC;;AAEjD;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACwC;AACI;AAC5C;AACA;AACA;AACA;AACA;AACA,kCAAkC,uEAAc;AAChD;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,WAAW,EAwCV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,yFAAyF;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,iBAAiB,yDAAY;AAC7B;AACA;AACA,+BAA+B,2DAAI,KAAK,6DAAM,aAAa,EAAE;AAC7D;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW,EAGV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,WAAW,EAqFV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,sCAAsC,4DAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,qCAAqC,+DAAwB,CAAC,8DAAuB,GAAG,+DAAwB,gCAAgC;AAChN,yBAAyB,+DAAwB,EAAE,sEAAsE;AACzH;AACA;AACA,KAAK,OAAO,8DAAgB,EAAE;AAC9B,KAAK,gCAAgC,OAAO,oDAAM,sCAAsC,GAAG,OAAO,sDAAQ,EAAE;AAC5G;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,8DAAuB,EAAE,GAAG;AAClE,sBAAsB,oDAAM;AAC5B;AACA,aAAa;AACb,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;AAC9B,WAAW,EAKV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,WAAW,EAqBV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,0DAA0D,kCAAkC,+DAAwB,CAAC,yDAAkB,GAAG;AAC1I,sBAAsB,+DAAwB,EAAE,yEAAyE,uCAAuC,EAAE;AAClK;AACA;AACA,KAAK,OAAO,yDAAW;AACvB;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,yDAAkB,EAAE,EAAE,EAAE,QAAQ,EAAE;AACxE,WAAW,EAYV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oDAAe,EAAE,kCAAkC;AACjF;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,sBAAsB,yBAAyB;AAC/C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oDAAoD,EAAE;AACtD,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oDAAoD,EAAE;AACtD,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,YAAY,6EAAY;AACxB;AACA;AACA,iBAAiB,yDAAY;AAC7B;AACA;AACA;AACA,yBAAyB,+CAAE;AAC3B;AACA;AACA,qDAAqD,gEAAS;AAC9D;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,iDAAiD,EAAE,kCAAkC,EAAE;AACvF;AACA;AACA,iDAAiD,EAAE;AACnD;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2DAA2D,EAAE;AAC7D,+CAA+C,EAAE;AACjD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,2BAA2B,+DAAwB,CAAC,6DAAsB,GAAG,+DAAwB,CAAC,+DAAwB,GAAG;AAC7K,eAAe,+DAAwB,EAAE,+GAA+G;AACxJ,QAAQ,4DAAqB;AAC7B,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,8CAA8C;AACrD,QAAQ,+DAAwB;AAChC,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,uDAAuD,2EAA2E,+HAA+H;AACxQ,QAAQ,gEAAyB;AACjC,KAAK,EAAE,qDAAqD;AAC5D;AACA;AACA,KAAK,OAAO,6DAAe,EAAE;AAC7B,KAAK,OAAO,+DAAiB;AAC7B;AACA;AACA,kBAAkB,OAAO,mDAAK,EAAE;AAChC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,eAAe,OAAO,mDAAK,EAAE;AAC7B,mBAAmB,OAAO,uDAAS,6BAA6B,eAAe,IAAI;AACnF,iBAAiB,OAAO,6DAAe;AACvC;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,+BAA+B,+DAAiB;AAChD;AACA;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,6DAAsB,EAAE,GAAG,OAAO,+DAAwB,EAAE,EAAE,EAAE,GAAG;AACzG,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,uDAAS;AAC3B,uCAAuC,eAAe;AACtD,SAAS;AACT,kBAAkB,6DAAe;AACjC;AACA;AACA;AACA;AACA,iBAAiB;AACjB,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EAwEV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA,gCAAgC,4CAAO;AACvC;AACA;AACA;AACA;AACA;AACA,qDAAqD,EAAE;AACvD;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,mBAAmB;AACnC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,sDAAsD,EAAE;AACxD;AACA,qBAAqB,yDAAY;AACjC,mCAAmC,gEAAS;AAC5C;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oDAAoD,+BAA+B,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,WAAW;AACnK,mBAAmB,+DAAwB,EAAE,4JAA4J;AACzM,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,eAAe,6BAA6B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK;AACL;AACA;AACA,YAAY,OAAO,mDAAK,EAAE;AAC1B;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,wDAAiB,EAAE,GAAG,gBAAgB,EAAE,EAAE,GAAG;AACnF,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EAuCV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,iDAAiD,EAAE;AACnD;AACA,iBAAiB,yDAAY;AAC7B,+BAA+B,gEAAS;AACxC;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,qCAAqC,gEAAS;AAC9C;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AAC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CA;AACA;AACA;AACA;AACA,2BAA2B,EAAE,EAAE,EAAE,EAAE;AACnC,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA,0BAA0B,+DAAa,EAAE,sEAAe;AACxD;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,2DAAI;AAC3C,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW,EASV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mEAAU;AAC9C;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA,kCAAkC,oDAAe;AACjD,iCAAiC,oDAAe;AAChD,yBAAyB,oDAAe;AACxC;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,yBAAyB;AACzC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,kDAAK,kBAAkB,0DAAG;AACzC,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,WAAW,EAiBV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mEAAU;AAChD;AACA;AACA,yBAAyB,oDAAe;AACxC;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,yBAAyB;AACzC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,wBAAwB;AAC7C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,kDAAK;AACpB,kBAAkB,0DAAG;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,WAAW,EAGV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;;AAE8M;;AAE9M,gC;;;;;;;;;;;;AC5wBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACN;AACE;AAC2B;AAC1C;;;;;;;;;;;ICA3B,mFACI;IAAA,uEAA0C;IAC1C,kFACiD;IAA7C,gZAA4C;IAAC,uDAAa;IAAA,4DAAe;IACjF,4DAAgB;;;;IAF8B,0DAA+C;IAA/C,sHAA+C;IACxC,0DAAa;IAAb,+EAAa;;;;IAGlE,mFACI;IAAA,uEAA0C;IAC1C,iFACI;IAAA,4EAAW;IAAA,sEAAW;IAAA,4DAAY;IAClC,yEACJ;IAAA,4DAAiB;IACjB,4EAA6D;IAA1C,8cAAyC;IAAC,+DAAI;IAAA,4DAAS;IAC9E,4DAAgB;;;;IAEhB,mFACI;IAAA,6EACI;IAAA,+EACI;IAAA,uDACJ;IAAA,4DAAW;IACf,4DAAS;IACT,mFAEI;IADqD,4YAAwC;IAC7F,uDAAa;IAAA,4DAAe;IAChC,6EACI;IADoB,uXAA0B;IAC9C,2EAAU;IAAA,8DAAG;IAAA,4DAAW;IAC5B,4DAAS;IACb,4DAAgB;;;;IAX8B,0DAA6C;IAA7C,uGAA6C;IAE/E,0DACJ;IADI,wJACJ;IAEU,0DAAwC;IAAxC,+GAAwC;IAElD,0DAAa;IAAb,yFAAa;;ADpB1B,MAAM,YAAY;CAGxB;AAED,iEAAiE;AAC1D,MAAM,gBAAgB;CAI5B;AAED;;GAEG;AACH,MAAM,SAAS,GAAG;IACd,SAAS,EAAE;QACP,mBAAmB,EAAE,IAAI;QACzB,cAAc,EAAE,IAAI;QACpB,gBAAgB,EAAE,IAAI;QACtB,MAAM,EAAE;YACJ,KAAK,EAAE,IAAI;YACX,OAAO,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC;YACnC,MAAM,EAAE,IAAI;SACf;KACJ;IACD,SAAS,EAAE;QACP,aAAa;QACb,+BAA+B;QAC/B,gCAAgC;KACnC;CACJ,CAAC;AAEF;;;;GAIG;AAEI,MAAM,iBAAiB;IAK1B;QAJA,eAAU,GAAG,IAAI,oDAAe,CAAiB,EAAE,CAAC,CAAC;QAKjD,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;IAJD,IAAI,IAAI,KAAqB,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IAM5D,UAAU;QACN,4FAA4F;QAC5F,6BAA6B;QAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;QAE9C,qBAAqB;QACrB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACH,aAAa,CAAC,GAA2B,EAAE,KAAa;QACpD,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAiB,CAAC,WAAW,EAAE,GAAG,EAAE,EAAE;YAChE,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;YACvB,MAAM,IAAI,GAAG,IAAI,YAAY,EAAE,CAAC;YAChC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;YAEhB,IAAI,KAAK,IAAI,IAAI,EAAE;gBACf,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;iBACxD;qBAAM;oBACH,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;iBACrB;aACJ;YAED,OAAO,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC,EAAE,EAAE,CAAC,CAAC;IACX,CAAC;IAED,gCAAgC;IAChC,UAAU,CAAC,MAAoB,EAAE,IAAY;QACzC,IAAI,MAAM,CAAC,QAAQ,EAAE;YACjB,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAkB,CAAC,CAAC;YACrD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACnC;IACL,CAAC;IAED,UAAU,CAAC,IAAkB,EAAE,IAAY;QACvC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;;kFAnDQ,iBAAiB;oGAAjB,iBAAiB,WAAjB,iBAAiB;6FAAjB,iBAAiB;cAD7B,wDAAU;;AA6DJ,MAAM,kBAAkB;IAsB3B,YAAoB,SAA4B;QAA5B,cAAS,GAAT,SAAS,CAAmB;QApBhD,gBAAW,GAAG,IAAI,GAAG,EAAkC,CAAC;QAExD,kGAAkG;QAClG,kBAAa,GAAG,IAAI,GAAG,EAAkC,CAAC;QAE1D,4CAA4C;QAC5C,mBAAc,GAA4B,IAAI,CAAC;QAE/C,0BAA0B;QAC1B,gBAAW,GAAG,EAAE,CAAC;QAQjB,kCAAkC;QAClC,uBAAkB,GAAG,IAAI,uEAAc,CAAmB,IAAI,CAAC,cAAc,CAAC,CAAC;QAa/E,aAAQ,GAAG,CAAC,IAAsB,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;QAElD,iBAAY,GAAG,CAAC,IAAsB,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC;QAE3D,gBAAW,GAAG,CAAC,IAAkB,EAAkB,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;QAEpE,aAAQ,GAAG,CAAC,CAAS,EAAE,SAA2B,EAAE,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC;QAE5E,iBAAY,GAAG,CAAC,CAAS,EAAE,SAA2B,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,KAAK,EAAE,CAAC;QAEjF;;WAEG;QACH,gBAAW,GAAG,CAAC,IAAkB,EAAE,KAAa,EAAE,EAAE;YAChD,MAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAClD,MAAM,QAAQ,GAAG,YAAY,IAAI,YAAY,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI;gBAC5D,CAAC,CAAC,YAAY;gBACd,CAAC,CAAC,IAAI,gBAAgB,EAAE,CAAC;YAC7B,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YAC1B,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;YACvB,QAAQ,CAAC,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;YACtC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YACrC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YACvC,OAAO,QAAQ,CAAC;QACpB,CAAC;QAlCG,IAAI,CAAC,aAAa,GAAG,IAAI,uEAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,EACrE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACzC,IAAI,CAAC,WAAW,GAAG,IAAI,iEAAe,CAAmB,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAC3F,IAAI,CAAC,UAAU,GAAG,IAAI,4EAAqB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAElF,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAClC,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;QAChC,CAAC,CAAC,CAAC;IACP,CAAC;IA4BD,4DAA4D;IAC5D,sBAAsB,CAAC,IAAsB;QACzC,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC1D,MAAM,eAAe,GAAG,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAC9C,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,CAC5C,CAAC;QACF,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,mDAAmD;IACnD,4BAA4B,CAAC,IAAsB;QAC/C,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC1D,MAAM,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QACpF,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;IACxD,CAAC;IAED,gFAAgF;IAChF,uBAAuB,CAAC,IAAsB;QAC1C,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACrC,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC1D,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,IAAI,CAAC;YACpC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,GAAG,WAAW,CAAC;YAChD,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,CAAC;QAEvD,8BAA8B;QAC9B,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CACtB,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,CAC5C,CAAC;QACF,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAED,uFAAuF;IACvF,2BAA2B,CAAC,IAAsB;QAC9C,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAED,oEAAoE;IACpE,wBAAwB,CAAC,IAAsB;QAC3C,IAAI,MAAM,GAA4B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC/D,OAAO,MAAM,EAAE;YACX,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;YACpC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;SACvC;IACL,CAAC;IAED,8DAA8D;IAC9D,sBAAsB,CAAC,IAAsB;QACzC,MAAM,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC9D,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC1D,MAAM,eAAe,GAAG,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAC9C,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,CAC5C,CAAC;QACF,IAAI,YAAY,IAAI,CAAC,eAAe,EAAE;YAClC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SAC1C;aAAM,IAAI,CAAC,YAAY,IAAI,eAAe,EAAE;YACzC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACxC;IACL,CAAC;IAED,mCAAmC;IACnC,aAAa,CAAC,IAAsB;QAChC,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,YAAY,GAAG,CAAC,EAAE;YAClB,OAAO,IAAI,CAAC;SACf;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEhE,KAAK,IAAI,CAAC,GAAG,UAAU,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;YAClC,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAElD,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,YAAY,EAAE;gBAC3C,OAAO,WAAW,CAAC;aACtB;SACJ;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,yDAAyD;IACzD,UAAU,CAAC,IAAsB;QAC7B,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC9C,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,UAAW,EAAE,EAAE,CAAC,CAAC;QAC3C,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;IAED,gCAAgC;IAChC,QAAQ,CAAC,IAAsB,EAAE,SAAiB;QAC9C,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC9C,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,UAAW,EAAE,SAAS,CAAC,CAAC;IACtD,CAAC;;oFAtJQ,kBAAkB,kEAsBI,iBAAiB;kGAtBvC,kBAAkB,+GAFhB,CAAC,iBAAiB,CAAC;QCxGlC,2EACI;QAAA,mFACI;QAAA,iFAAgB;QAAA,+EAAoB;QAAA,4DAAiB;QACrD,8EACI;QAAA,kIACI;QAKJ,kIACI;QAQJ,kIACI;QAYR,4DAAW;QACf,4DAAmB;QACvB,4DAAW;;QA/BO,0DAAyB;QAAzB,sFAAyB;QAOhB,0DAA8C;QAA9C,gGAA8C;QAS9C,0DAA0C;QAA1C,4FAA0C;;6FDuFxD,kBAAkB;cAN9B,uDAAS;eAAC;gBACP,QAAQ,EAAE,gBAAgB;gBAC1B,WAAW,EAAE,6BAA6B;gBAC1C,SAAS,EAAE,CAAC,6BAA6B,CAAC;gBAC1C,SAAS,EAAE,CAAC,iBAAiB,CAAC;aACjC;sCAuBkC,iBAAiB;;;;;;;;;;;;;AE/HpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoD;AACE;AACI;AACrB;;;;;;;;;ICAzB,mFACI;IAAA,uEAA0C;IAC1C,uDACJ;IAAA,4DAAgB;;;IADZ,0DACJ;IADI,0FACJ;;;IAQI,iFACmB;;;IARvB,mFACI;IAAA,4EACI;IAAA,8EACI;IAAA,uDACJ;IAAA,4DAAW;IACf,4DAAS;IACT,uDACA;IAAA,0JACA;IACJ,4DAAgB;;;;IARY,0DAA6C;IAA7C,uGAA6C;IAE7D,0DACJ;IADI,wJACJ;IAEJ,0DACA;IADA,0FACA;IAAkB,0DAAsB;IAAtB,qFAAsB;;ADTjD,MAAM,eAAe;IACxB,YAAmB,IAAY,EAAS,QAAQ,CAAC,EAAS,aAAa,KAAK,EACjE,YAAY,KAAK;QADT,SAAI,GAAJ,IAAI,CAAQ;QAAS,UAAK,GAAL,KAAK,CAAI;QAAS,eAAU,GAAV,UAAU,CAAQ;QACjE,cAAS,GAAT,SAAS,CAAQ;IAAI,CAAC;CACpC;AAED;;;GAGG;AAEI,MAAM,eAAe;IAD5B;QAEI,YAAO,GAAG,IAAI,GAAG,CAAmB;YAChC,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACzC,CAAC,YAAY,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;YAC7C,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;YAChC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;SAC3C,CAAC,CAAC;QAEH,mBAAc,GAAa,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;KAcvD;IAZG,iCAAiC;IACjC,WAAW;QACP,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,eAAe,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAC/E,CAAC;IAED,WAAW,CAAC,IAAY;QACpB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;IAED,YAAY,CAAC,IAAY;QACrB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;;8EArBQ,eAAe;kGAAf,eAAe,WAAf,eAAe,mBADF,MAAM;6FACnB,eAAe;cAD3B,wDAAU;eAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;AAwBlC;;;;;;GAMG;AACI,MAAM,iBAAiB;IAU1B,YAAoB,YAA8C,EACtD,SAA0B;QADlB,iBAAY,GAAZ,YAAY,CAAkC;QACtD,cAAS,GAAT,SAAS,CAAiB;QATtC,eAAU,GAAG,IAAI,oDAAe,CAAoB,EAAE,CAAC,CAAC;IASd,CAAC;IAP3C,IAAI,IAAI,KAAwB,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/D,IAAI,IAAI,CAAC,KAAwB;QAC7B,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,KAAK,CAAC;QACpC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAKD,OAAO,CAAC,gBAAkC;QACtC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;YACxD,IAAK,MAA2C,CAAC,KAAK;gBACjD,MAA2C,CAAC,OAAO,EAAE;gBACtD,IAAI,CAAC,iBAAiB,CAAC,MAA0C,CAAC,CAAC;aACtE;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,kDAAK,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,0DAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1F,CAAC;IAED,UAAU,CAAC,gBAAkC,IAAU,CAAC;IAExD,uCAAuC;IACvC,iBAAiB,CAAC,MAAwC;QACtD,IAAI,MAAM,CAAC,KAAK,EAAE;YACd,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;SAC7D;QACD,IAAI,MAAM,CAAC,OAAO,EAAE;YAChB,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;SAClF;IACL,CAAC;IAED;;OAEG;IACH,UAAU,CAAC,IAAqB,EAAE,MAAe;QAC7C,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACtC,IAAI,CAAC,QAAQ,IAAI,KAAK,GAAG,CAAC,EAAE,EAAE,iDAAiD;YAC3E,OAAO;SACV;QAED,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,UAAU,CAAC,GAAG,EAAE;YACZ,IAAI,MAAM,EAAE;gBACR,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAC9B,IAAI,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAClF,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,EAAE,GAAG,KAAK,CAAC,CAAC;aAC5C;iBAAM;gBACH,IAAI,KAAK,GAAG,CAAC,CAAC;gBACd,KAAK,IAAI,CAAC,GAAG,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM;uBACrC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,EAAG,KAAK,EAAE,EAAE,GAAG;gBAC1D,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;aACtC;YAED,oBAAoB;YACpB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAC3B,CAAC,EAAE,IAAI,CAAC,CAAC;IACb,CAAC;CACJ;AAOM,MAAM,oBAAoB;IAE7B,YAAY,QAAyB;QAWrC,aAAQ,GAAG,CAAC,IAAqB,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;QAEjD,iBAAY,GAAG,CAAC,IAAqB,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC;QAE1D,aAAQ,GAAG,CAAC,CAAS,EAAE,SAA0B,EAAE,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC;QAdvE,IAAI,CAAC,WAAW,GAAG,IAAI,iEAAe,CAAkB,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAC1F,IAAI,CAAC,UAAU,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAEpE,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;IAClD,CAAC;;wFAPQ,oBAAoB,kEAEP,eAAe;oGAF5B,oBAAoB;QCtHjC,2EACI;QAAA,mFACI;QAAA,iFAAgB;QAAA,iFAAsB;QAAA,4DAAiB;QACvD,8EACI;QAAA,oIACI;QAGJ,oIACI;QASR,4DAAW;QACf,4DAAmB;QACvB,4DAAW;;QAjBO,0DAAyB;QAAzB,sFAAyB;QAKhB,0DAA0C;QAA1C,4FAA0C;;6FD8GxD,oBAAoB;cALhC,uDAAS;eAAC;gBACP,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,+BAA+B;gBAC5C,SAAS,EAAE,CAAC,+BAA+B,CAAC;aAC/C;sCAGyB,eAAe;;;;;;;;;;;;;AExHzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoD;AACV;AACuC;;;;;;;ICGrE,mFACI;IACA,uEAA0C;IAC1C,uDACJ;IAAA,4DAAgB;;;IADZ,0DACJ;IADI,0FACJ;;;IAEA,mFACI;IAAA,4EACI;IAAA,8EACI;IAAA,uDACJ;IAAA,4DAAW;IACf,4DAAS;IACT,uDACJ;IAAA,4DAAgB;;;;IAN8B,0DAAyC;IAAzC,mGAAyC;IAE3E,0DACJ;IADI,wJACJ;IAEJ,0DACJ;IADI,0FACJ;;ADTZ,MAAM,SAAS,GAAe;IAC1B;QACI,IAAI,EAAE,OAAO;QACb,QAAQ,EAAE;YACN,EAAE,IAAI,EAAE,OAAO,EAAE;YACjB,EAAE,IAAI,EAAE,QAAQ,EAAE;YAClB,EAAE,IAAI,EAAE,aAAa,EAAE;SAC1B;KACJ,EAAE;QACC,IAAI,EAAE,YAAY;QAClB,QAAQ,EAAE;YACN;gBACI,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE;oBACN,EAAE,IAAI,EAAE,UAAU,EAAE;oBACpB,EAAE,IAAI,EAAE,kBAAkB,EAAE;iBAC/B;aACJ,EAAE;gBACC,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE;oBACN,EAAE,IAAI,EAAE,UAAU,EAAE;oBACpB,EAAE,IAAI,EAAE,SAAS,EAAE;iBACtB;aACJ;SACJ;KACJ;CACJ,CAAC;AAcK,MAAM,iBAAiB;IAkB1B;QAhBQ,iBAAY,GAAG,CAAC,IAAc,EAAE,KAAa,EAAE,EAAE;YACrD,OAAO;gBACH,UAAU,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;gBACvD,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,KAAK,EAAE,KAAK;aACf,CAAC;QACN,CAAC;QAED,gBAAW,GAAG,IAAI,iEAAe,CAC7B,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAEjD,kBAAa,GAAG,IAAI,uEAAgB,CAChC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE3F,eAAU,GAAG,IAAI,4EAAqB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAM7E,aAAQ,GAAG,CAAC,CAAS,EAAE,IAAqB,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC;QAH7D,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,SAAS,CAAC;IACrC,CAAC;;kFApBQ,iBAAiB;iGAAjB,iBAAiB;QCjD9B,2EACI;QAAA,mFACI;QAAA,iFAAgB;QAAA,+EAAoB;QAAA,4DAAiB;QACrD,8EACI;QACA,iIACI;QAKJ,iIACI;QAOR,4DAAW;QACf,4DAAmB;QACvB,4DAAW;;QAlBO,0DAAyB;QAAzB,sFAAyB;QAQhB,0DAAyC;QAAzC,4FAAyC;;6FDsCvD,iBAAiB;cAL7B,uDAAS;eAAC;gBACP,QAAQ,EAAE,eAAe;gBACzB,WAAW,EAAE,4BAA4B;gBACzC,SAAS,EAAE,CAAC,4BAA4B,CAAC;aAC5C;;;;;;;;;;;;;;AEhDD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoD;AACE;AAC2B;AAC9B;;;;;;;ICEvC,mFACI;IAAA,uEAA0C;IAC1C,uDACJ;IAAA,4DAAgB;;;IADZ,0DACJ;IADI,0FACJ;;;;IAGA,mFACI;IAAA,4EAEI;IAFkE,wXAA4B;IAE9F,8EACI;IAAA,uDACJ;IAAA,4DAAW;IACf,4DAAS;IACT,uDACJ;IAAA,4DAAgB;;;;IAPY,0DAA6C;IAA7C,uGAA6C;IAG7D,0DACJ;IADI,wJACJ;IAEJ,0DACJ;IADI,0FACJ;;;;IAEA,gFACI;IAAA,4EACI;IADe,uYAA2C;IAC1D,yEACJ;IAAA,4DAAS;IACb,4DAAgB;;ADnB5B,MAAM,SAAS,GAAG,WAAW,CAAC;AAE9B,kBAAkB;AACX,MAAM,YAAY;IAOrB,YAAmB,IAAY,EACpB,cAAc,KAAK,EACnB,qBAAoC,IAAI;QAFhC,SAAI,GAAJ,IAAI,CAAQ;QACpB,gBAAW,GAAX,WAAW,CAAQ;QACnB,uBAAkB,GAAlB,kBAAkB,CAAsB;QARnD,mBAAc,GAAG,IAAI,oDAAe,CAAiB,EAAE,CAAC,CAAC;IAQF,CAAC;IANxD,IAAI,QAAQ;QACR,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;IACrC,CAAC;CAKJ;AAED,sDAAsD;AAC/C,MAAM,gBAAgB;IACzB,YAAmB,IAAY,EACpB,QAAQ,CAAC,EACT,aAAa,KAAK,EAClB,qBAAoC,IAAI;QAHhC,SAAI,GAAJ,IAAI,CAAQ;QACpB,UAAK,GAAL,KAAK,CAAI;QACT,eAAU,GAAV,UAAU,CAAQ;QAClB,uBAAkB,GAAlB,kBAAkB,CAAsB;IAAI,CAAC;CAC3D;AAED;;;GAGG;AAEI,MAAM,gBAAgB;IAD7B;QAEI,gBAAW,GAAG,CAAC,CAAC;QAChB,eAAU,GAAG,IAAI,oDAAe,CAAiB,EAAE,CAAC,CAAC;QACrD,YAAO,GAAG,IAAI,GAAG,EAAwB,CAAC;QAE1C,eAAe;QACf,mBAAc,GAAa,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;QACpD,YAAO,GAAG,IAAI,GAAG,CAAmB;YAChC,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACzC,CAAC,YAAY,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;YAC7C,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;YAChC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;SACvF,CAAC,CAAC;KAqCN;IAnCG,UAAU;QACN,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;QACvE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,kDAAkD;IAClD,QAAQ,CAAC,IAAY,EAAE,aAAa,GAAG,KAAK;QACxC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACpD,OAAO;SACV;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC;QACvC,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC;QACzC,IAAI,aAAa,IAAI,MAAM,CAAC,QAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YAC9C,OAAO;SACV;QACD,MAAM,iBAAiB,GAAG,MAAM,CAAC,QAAS,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC;QACrE,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,iBAAiB,CAAC;aAC7C,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3C,IAAI,iBAAiB,GAAG,QAAQ,CAAC,MAAM,EAAE;YACrC,4BAA4B;YAC5B,KAAK,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;SACxD;QAED,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC;IAEO,aAAa,CAAC,IAAY;QAC9B,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACxB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC;SAClC;QACD,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9D,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC/B,OAAO,MAAM,CAAC;IAClB,CAAC;;gFAhDQ,gBAAgB;mGAAhB,gBAAgB,WAAhB,gBAAgB;6FAAhB,gBAAgB;cAD5B,wDAAU;;AA2DJ,MAAM,iBAAiB;IAQ1B,YAAoB,SAA2B;QAA3B,cAAS,GAAT,SAAS,CAAkB;QAN/C,YAAO,GAAG,IAAI,GAAG,EAA4B,CAAC;QAqB9C,gBAAW,GAAG,CAAC,IAAkB,EAA8B,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC;QAEtF,gBAAW,GAAG,CAAC,IAAkB,EAAE,KAAa,EAAE,EAAE;YAChD,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEjD,IAAI,YAAY,EAAE;gBACd,OAAO,YAAY,CAAC;aACvB;YAED,MAAM,OAAO,GACT,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;YACtF,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YACrC,OAAO,OAAO,CAAC;QACnB,CAAC;QAED,aAAQ,GAAG,CAAC,IAAsB,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;QAElD,iBAAY,GAAG,CAAC,IAAsB,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC;QAE3D,aAAQ,GAAG,CAAC,CAAS,EAAE,SAA2B,EAAE,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC;QAE5E,eAAU,GAAG,CAAC,CAAS,EAAE,SAA2B,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC;QAnClF,IAAI,CAAC,aAAa,GAAG,IAAI,uEAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,EACrE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAEzC,IAAI,CAAC,WAAW,GAAG,IAAI,iEAAe,CAAmB,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAE3F,IAAI,CAAC,UAAU,GAAG,IAAI,4EAAqB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAElF,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAClC,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,UAAU,EAAE,CAAC;IAC3B,CAAC;IAyBD,uCAAuC;IACvC,QAAQ,CAAC,IAAY;QACjB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;IAED,YAAY,CAAC,IAAsB;QAC/B,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC7C,CAAC;;kFArDQ,iBAAiB,kEAQK,gBAAgB;iGARtC,iBAAiB,8GAFf,CAAC,gBAAgB,CAAC;QC1FjC,2EACI;QAAA,mFACI;QAAA,iFAAgB;QAAA,0FAA+B;QAAA,4DAAiB;QAChE,8EACI;QACA,iIACI;QAKJ,iIACI;QASJ,iIACI;QAIR,4DAAW;QACf,4DAAmB;QACvB,4DAAW;;QAzBO,0DAAyB;QAAzB,sFAAyB;QAQhB,0DAA0C;QAA1C,4FAA0C;QAU1C,0DAA4C;QAA5C,8FAA4C;;6FDuE1D,iBAAiB;cAN7B,uDAAS;eAAC;gBACP,QAAQ,EAAE,eAAe;gBACzB,WAAW,EAAE,4BAA4B;gBACzC,SAAS,EAAE,CAAC,4BAA4B,CAAC;gBACzC,SAAS,EAAE,CAAC,gBAAgB,CAAC;aAChC;sCASkC,gBAAgB;;;;;;;;;;;;;AEpGnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsD;AACZ;AACuB;;;;;;;ICGrD,mFACI;IAAA,wEACI;IACA,uEAA0C;IAC1C,uDACJ;IAAA,4DAAK;IACT,4DAAgB;;;IAFR,0DACJ;IADI,0FACJ;;;IAGJ,uFACI;IAAA,qEACI;IAAA,yEACI;IAAA,4EACI;IAAA,8EACI;IAAA,uDACJ;IAAA,4DAAW;IACf,4DAAS;IACT,uDACJ;IAAA,4DAAM;IACN,qEACI;IAAA,sEAA+C;IACnD,4DAAK;IACT,4DAAK;IACT,4DAAuB;;;;IAX+B,0DAAyC;IAAzC,mGAAyC;IAE3E,0DACJ;IADI,wJACJ;IAEJ,0DACJ;IADI,0FACJ;IACI,0DAA8D;IAA9D,gIAA8D;;ADVtF,MAAM,SAAS,GAAe;IAC1B;QACI,IAAI,EAAE,OAAO;QACb,QAAQ,EAAE;YACN,EAAE,IAAI,EAAE,OAAO,EAAE;YACjB,EAAE,IAAI,EAAE,QAAQ,EAAE;YAClB,EAAE,IAAI,EAAE,aAAa,EAAE;SAC1B;KACJ,EAAE;QACC,IAAI,EAAE,YAAY;QAClB,QAAQ,EAAE;YACN;gBACI,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE;oBACN,EAAE,IAAI,EAAE,UAAU,EAAE;oBACpB,EAAE,IAAI,EAAE,kBAAkB,EAAE;iBAC/B;aACJ,EAAE;gBACC,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE;oBACN,EAAE,IAAI,EAAE,UAAU,EAAE;oBACpB,EAAE,IAAI,EAAE,SAAS,EAAE;iBACtB;aACJ;SACJ;KACJ;CACJ,CAAC;AAQK,MAAM,mBAAmB;IAK5B;QAHA,gBAAW,GAAG,IAAI,mEAAiB,CAAW,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrE,eAAU,GAAG,IAAI,8EAAuB,EAAY,CAAC;QAMrD,aAAQ,GAAG,CAAC,CAAS,EAAE,IAAc,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;QAHlF,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,SAAS,CAAC;IACrC,CAAC;;sFAPQ,mBAAmB;mGAAnB,mBAAmB;QC/ChC,2EACI;QAAA,mFACI;QAAA,iFAAgB;QAAA,iFAAsB;QAAA,4DAAiB;QACvD,8EACI;QACA,mIACI;QAOJ,iJACI;QAcR,4DAAW;QACf,4DAAmB;QACvB,4DAAW;;QA3BO,0DAAyB;QAAzB,sFAAyB;QAUT,0DAA0C;QAA1C,4FAA0C;;6FDkC/D,mBAAmB;cAL/B,uDAAS;eAAC;gBACP,QAAQ,EAAE,iBAAiB;gBAC3B,WAAW,EAAE,8BAA8B;gBAC3C,SAAS,EAAE,CAAC,8BAA8B,CAAC;aAC9C;;;;;;;;;;;;;;AE9CD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkB;AACuB;AACM;AACA;AACc;AACK;AACX;AACC;AACZ;AAG2B;AACM;AACT;AACA;AACM;;;AAoBnE,MAAM,UAAU;;yFAAV,UAAU;8IAAV,UAAU,kBAjBV;YACL,4DAAY;YACZ,4DAAY,CAAC,QAAQ,CAAC,wDAAU,CAAC;YACjC,wEAAkB;YAClB,qEAAgB;YAChB,0DAAW;YACX,oEAAa;YACb,kEAAmB;SACtB;mIASQ,UAAU,mBAPf,mFAAkB;QAClB,0FAAoB;QACpB,iFAAiB;QACjB,iFAAiB;QACjB,uFAAmB,aAbnB,4DAAY,gEAEZ,wEAAkB;QAClB,qEAAgB;QAChB,0DAAW;QACX,oEAAa;QACb,kEAAmB;6FAUd,UAAU;cAlBtB,sDAAQ;eAAC;gBACN,OAAO,EAAE;oBACL,4DAAY;oBACZ,4DAAY,CAAC,QAAQ,CAAC,wDAAU,CAAC;oBACjC,wEAAkB;oBAClB,qEAAgB;oBAChB,0DAAW;oBACX,oEAAa;oBACb,kEAAmB;iBACtB;gBACD,YAAY,EAAE;oBACV,mFAAkB;oBAClB,0FAAoB;oBACpB,iFAAiB;oBACjB,iFAAiB;oBACjB,uFAAmB;iBACtB;aACJ;;;;;;;;;;;;;;AChCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuE;AACM;AACT;AACA;AACM;AAEnE,MAAM,UAAU,GAAW;IAC9B;QACI,IAAI,EAAE,EAAE;QACR,QAAQ,EAAE;YACN;gBACI,IAAI,EAAE,YAAY;gBAClB,SAAS,EAAE,mFAAkB;gBAC7B,IAAI,EAAE;oBACF,KAAK,EAAE,oBAAoB;oBAC3B,IAAI,EAAE;wBACF,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,EAAE,YAAY,EAAE;wBACzC,EAAE,KAAK,EAAE,oBAAoB,EAAE;qBAClC;iBACJ;aACJ;YACD;gBACI,IAAI,EAAE,cAAc;gBACpB,SAAS,EAAE,yFAAoB;gBAC/B,IAAI,EAAE;oBACF,KAAK,EAAE,wBAAwB;oBAC/B,IAAI,EAAE;wBACF,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,EAAE,YAAY,EAAE;wBACzC,EAAE,KAAK,EAAE,wBAAwB,EAAE;qBACtC;iBACJ;aACJ;YACD;gBACI,IAAI,EAAE,WAAW;gBACjB,SAAS,EAAE,gFAAiB;gBAC5B,IAAI,EAAE;oBACF,KAAK,EAAE,qBAAqB;oBAC5B,IAAI,EAAE;wBACF,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,EAAE,YAAY,EAAE;wBACzC,EAAE,KAAK,EAAE,qBAAqB,EAAE;qBACnC;iBACJ;aACJ;YACD;gBACI,IAAI,EAAE,WAAW;gBACjB,SAAS,EAAE,gFAAiB;gBAC5B,IAAI,EAAE;oBACF,KAAK,EAAE,uBAAuB;oBAC9B,IAAI,EAAE;wBACF,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,EAAE,YAAY,EAAE;wBACzC,EAAE,KAAK,EAAE,uBAAuB,EAAE;qBACrC;iBACJ;aACJ;YACD;gBACI,IAAI,EAAE,aAAa;gBACnB,SAAS,EAAE,sFAAmB;gBAC9B,IAAI,EAAE;oBACF,KAAK,EAAE,aAAa;oBACpB,IAAI,EAAE;wBACF,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,EAAE,YAAY,EAAE;wBACzC,EAAE,KAAK,EAAE,aAAa,EAAE;qBAC3B;iBACJ;aACJ;SACJ;KACJ;CACJ,CAAC","file":"tree-tree-module-es2015.js","sourcesContent":["import { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport { InjectionToken, Directive, ViewContainerRef, Inject, Optional, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, IterableDiffers, ChangeDetectorRef, Input, ViewChild, ContentChildren, ElementRef, Renderer2, HostListener, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor } from '@angular/cdk/a11y';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/control/base-tree-control.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Base tree control. It has basic toggle/expand/collapse operations on a single data node.\n * @abstract\n * @template T\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nclass BaseTreeControl {\n    constructor() {\n        /**\n         * A selection model with multi-selection to track expansion status.\n         */\n        this.expansionModel = new SelectionModel(true);\n    }\n    /**\n     * Toggles one single data node's expanded/collapsed state.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    toggle(dataNode) {\n        this.expansionModel.toggle(dataNode);\n    }\n    /**\n     * Expands one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    expand(dataNode) {\n        this.expansionModel.select(dataNode);\n    }\n    /**\n     * Collapses one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    collapse(dataNode) {\n        this.expansionModel.deselect(dataNode);\n    }\n    /**\n     * Whether a given data node is expanded or not. Returns true if the data node is expanded.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    isExpanded(dataNode) {\n        return this.expansionModel.isSelected(dataNode);\n    }\n    /**\n     * Toggles a subtree rooted at `node` recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    toggleDescendants(dataNode) {\n        this.expansionModel.isSelected(dataNode)\n            ? this.collapseDescendants(dataNode)\n            : this.expandDescendants(dataNode);\n    }\n    /**\n     * Collapse all dataNodes in the tree.\n     * @return {?}\n     */\n    collapseAll() {\n        this.expansionModel.clear();\n    }\n    /**\n     * Expands a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    expandDescendants(dataNode) {\n        /** @type {?} */\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed);\n    }\n    /**\n     * Collapses a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    collapseDescendants(dataNode) {\n        /** @type {?} */\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed);\n    }\n}\nif (false) {\n    /**\n     * Saved data node for `expandAll` action.\n     * @type {?}\n     */\n    BaseTreeControl.prototype.dataNodes;\n    /**\n     * A selection model with multi-selection to track expansion status.\n     * @type {?}\n     */\n    BaseTreeControl.prototype.expansionModel;\n    /**\n     * Get depth of a given data node, return the level number. This is for flat tree node.\n     * @type {?}\n     */\n    BaseTreeControl.prototype.getLevel;\n    /**\n     * Whether the data node is expandable. Returns true if expandable.\n     * This is for flat tree node.\n     * @type {?}\n     */\n    BaseTreeControl.prototype.isExpandable;\n    /**\n     * Gets a stream that emits whenever the given data node's children change.\n     * @type {?}\n     */\n    BaseTreeControl.prototype.getChildren;\n    /**\n     * Gets a list of descendent data nodes of a subtree rooted at given data node recursively.\n     * @abstract\n     * @param {?} dataNode\n     * @return {?}\n     */\n    BaseTreeControl.prototype.getDescendants = function (dataNode) { };\n    /**\n     * Expands all data nodes in the tree.\n     * @abstract\n     * @return {?}\n     */\n    BaseTreeControl.prototype.expandAll = function () { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/control/flat-tree-control.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.\n * @template T\n */\nclass FlatTreeControl extends BaseTreeControl {\n    /**\n     * Construct with flat tree data node functions getLevel and isExpandable.\n     * @param {?} getLevel\n     * @param {?} isExpandable\n     */\n    constructor(getLevel, isExpandable) {\n        super();\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n    }\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    getDescendants(dataNode) {\n        /** @type {?} */\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        /** @type {?} */\n        const results = [];\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n            results.push(this.dataNodes[i]);\n        }\n        return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     * @return {?}\n     */\n    expandAll() {\n        this.expansionModel.select(...this.dataNodes);\n    }\n}\nif (false) {\n    /** @type {?} */\n    FlatTreeControl.prototype.getLevel;\n    /** @type {?} */\n    FlatTreeControl.prototype.isExpandable;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/control/nested-tree-control.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.\n * @template T\n */\nclass NestedTreeControl extends BaseTreeControl {\n    /**\n     * Construct with nested tree function getChildren.\n     * @param {?} getChildren\n     */\n    constructor(getChildren) {\n        super();\n        this.getChildren = getChildren;\n    }\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     * @return {?}\n     */\n    expandAll() {\n        this.expansionModel.clear();\n        /** @type {?} */\n        const allNodes = this.dataNodes.reduce((/**\n         * @param {?} accumulator\n         * @param {?} dataNode\n         * @return {?}\n         */\n        (accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode]), []);\n        this.expansionModel.select(...allNodes);\n    }\n    /**\n     * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    getDescendants(dataNode) {\n        /** @type {?} */\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n        // Remove the node itself\n        return descendants.splice(1);\n    }\n    /**\n     * A helper function to get descendants recursively.\n     * @protected\n     * @param {?} descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n    _getDescendants(descendants, dataNode) {\n        descendants.push(dataNode);\n        /** @type {?} */\n        const childrenNodes = this.getChildren(dataNode);\n        if (Array.isArray(childrenNodes)) {\n            childrenNodes.forEach((/**\n             * @param {?} child\n             * @return {?}\n             */\n            (child) => this._getDescendants(descendants, child)));\n        }\n        else if (isObservable(childrenNodes)) {\n            // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n            // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n            childrenNodes.pipe(take(1), filter((/** @type {?} */ (Boolean))))\n                .subscribe((/**\n             * @param {?} children\n             * @return {?}\n             */\n            children => {\n                for (const child of children) {\n                    this._getDescendants(descendants, child);\n                }\n            }));\n        }\n    }\n}\nif (false) {\n    /** @type {?} */\n    NestedTreeControl.prototype.getChildren;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/control/tree-control.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Tree control interface. User can implement TreeControl to expand/collapse dataNodes in the tree.\n * The CDKTree will use this TreeControl to expand/collapse a node.\n * User can also use it outside the `<cdk-tree>` to control the expansion status of the tree.\n * @record\n * @template T\n */\nfunction TreeControl() { }\nif (false) {\n    /**\n     * The saved tree nodes data for `expandAll` action.\n     * @type {?}\n     */\n    TreeControl.prototype.dataNodes;\n    /**\n     * The expansion model\n     * @type {?}\n     */\n    TreeControl.prototype.expansionModel;\n    /**\n     * Get depth of a given data node, return the level number. This is for flat tree node.\n     * @type {?}\n     */\n    TreeControl.prototype.getLevel;\n    /**\n     * Whether the data node is expandable. Returns true if expandable.\n     * This is for flat tree node.\n     * @type {?}\n     */\n    TreeControl.prototype.isExpandable;\n    /**\n     * Gets a stream that emits whenever the given data node's children change.\n     * @type {?}\n     */\n    TreeControl.prototype.getChildren;\n    /**\n     * Whether the data node is expanded or collapsed. Return true if it's expanded.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.isExpanded = function (dataNode) { };\n    /**\n     * Get all descendants of a data node\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.getDescendants = function (dataNode) { };\n    /**\n     * Expand or collapse data node\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.toggle = function (dataNode) { };\n    /**\n     * Expand one data node\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.expand = function (dataNode) { };\n    /**\n     * Collapse one data node\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.collapse = function (dataNode) { };\n    /**\n     * Expand all the dataNodes in the tree\n     * @return {?}\n     */\n    TreeControl.prototype.expandAll = function () { };\n    /**\n     * Collapse all the dataNodes in the tree\n     * @return {?}\n     */\n    TreeControl.prototype.collapseAll = function () { };\n    /**\n     * Toggle a data node by expand/collapse it and all its descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.toggleDescendants = function (dataNode) { };\n    /**\n     * Expand a data node and all its descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.expandDescendants = function (dataNode) { };\n    /**\n     * Collapse a data node and all its descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.collapseDescendants = function (dataNode) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/outlet.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass CdkTreeNodeOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?=} _node\n     */\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nCdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) { return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nCdkTreeNodeOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeOutlet, selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]] });\n/** @nocollapse */\nCdkTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeOutlet]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\nif (false) {\n    /** @type {?} */\n    CdkTreeNodeOutlet.prototype.viewContainer;\n    /** @type {?} */\n    CdkTreeNodeOutlet.prototype._node;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/node.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Context provided to the tree node component.\n * @template T\n */\nclass CdkTreeNodeOutletContext {\n    /**\n     * @param {?} data\n     */\n    constructor(data) {\n        this.$implicit = data;\n    }\n}\nif (false) {\n    /**\n     * Data for the node.\n     * @type {?}\n     */\n    CdkTreeNodeOutletContext.prototype.$implicit;\n    /**\n     * Depth of the node.\n     * @type {?}\n     */\n    CdkTreeNodeOutletContext.prototype.level;\n    /**\n     * Index location of the node.\n     * @type {?}\n     */\n    CdkTreeNodeOutletContext.prototype.index;\n    /**\n     * Length of the number of total dataNodes.\n     * @type {?}\n     */\n    CdkTreeNodeOutletContext.prototype.count;\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n * @template T\n */\nclass CdkTreeNodeDef {\n    /**\n     * \\@docs-private\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) { return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkTreeNodeDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeDef, selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]], inputs: { when: [\"cdkTreeNodeDefWhen\", \"when\"] } });\n/** @nocollapse */\nCdkTreeNodeDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeDef]',\n                inputs: [\n                    'when: cdkTreeNodeDefWhen'\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\nif (false) {\n    /**\n     * Function that should return true if this node template should be used for the provided node\n     * data and index. If left undefined, this node will be considered the default node template to\n     * use when no other when functions return true for the data.\n     * For every node, there must be at least one when function that passes or an undefined to\n     * default.\n     * @type {?}\n     */\n    CdkTreeNodeDef.prototype.when;\n    /** @type {?} */\n    CdkTreeNodeDef.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/tree-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when there is no usable data.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeNoValidDataSourceError() {\n    return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeMissingMatchingNodeDefError() {\n    return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeControlMissingError() {\n    return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeControlFunctionsMissingError() {\n    return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/tree.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n * @template T\n */\nclass CdkTree {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     */\n    constructor(_differs, _changeDetectorRef) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Level of nodes\n         */\n        this._levels = new Map();\n        // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n        //     Remove the MAX_VALUE in viewChange\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     * @return {?}\n     */\n    get dataSource() { return this._dataSource; }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n        if (!this.treeControl) {\n            throw getTreeControlMissingError();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (this._dataSource && typeof ((/** @type {?} */ (this._dataSource))).disconnect === 'function') {\n            ((/** @type {?} */ (this.dataSource))).disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        /** @type {?} */\n        const defaultNodeDefs = this._nodeDefs.filter((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => !def.when));\n        if (defaultNodeDefs.length > 1) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this._defaultNodeDef = defaultNodeDefs[0];\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            this._observeRenderChanges();\n        }\n    }\n    // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n    //     and nested trees.\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     * @private\n     * @param {?} dataSource\n     * @return {?}\n     */\n    _switchDataSource(dataSource) {\n        if (this._dataSource && typeof ((/** @type {?} */ (this._dataSource))).disconnect === 'function') {\n            ((/** @type {?} */ (this.dataSource))).disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) {\n            this._nodeOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n        if (this._nodeDefs) {\n            this._observeRenderChanges();\n        }\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @private\n     * @return {?}\n     */\n    _observeRenderChanges() {\n        /** @type {?} */\n        let dataStream;\n        if (isDataSource(this._dataSource)) {\n            dataStream = this._dataSource.connect(this);\n        }\n        else if (isObservable(this._dataSource)) {\n            dataStream = this._dataSource;\n        }\n        else if (Array.isArray(this._dataSource)) {\n            dataStream = of(this._dataSource);\n        }\n        if (dataStream) {\n            this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n                .subscribe((/**\n             * @param {?} data\n             * @return {?}\n             */\n            data => this.renderNodeChanges(data)));\n        }\n        else {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n    /**\n     * Check for changes made in the data and render each change (node added/removed/moved).\n     * @param {?} data\n     * @param {?=} dataDiffer\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n    renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n        /** @type {?} */\n        const changes = dataDiffer.diff(data);\n        if (!changes) {\n            return;\n        }\n        changes.forEachOperation((/**\n         * @param {?} item\n         * @param {?} adjustedPreviousIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (item, adjustedPreviousIndex, currentIndex) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[(/** @type {?} */ (currentIndex))], (/** @type {?} */ (currentIndex)), viewContainer, parentData);\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove((/** @type {?} */ (adjustedPreviousIndex)));\n                this._levels.delete(item.item);\n            }\n            else {\n                /** @type {?} */\n                const view = viewContainer.get((/** @type {?} */ (adjustedPreviousIndex)));\n                viewContainer.move((/** @type {?} */ (view)), currentIndex);\n            }\n        }));\n        this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     * @param {?} data\n     * @param {?} i\n     * @return {?}\n     */\n    _getNodeDef(data, i) {\n        if (this._nodeDefs.length === 1) {\n            return this._nodeDefs.first;\n        }\n        /** @type {?} */\n        const nodeDef = this._nodeDefs.find((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.when && def.when(i, data))) || this._defaultNodeDef;\n        if (!nodeDef) {\n            throw getTreeMissingMatchingNodeDefError();\n        }\n        return nodeDef;\n    }\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     * @param {?} nodeData\n     * @param {?} index\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n    insertNode(nodeData, index, viewContainer, parentData) {\n        /** @type {?} */\n        const node = this._getNodeDef(nodeData, index);\n        // Node context that will be provided to created embedded view\n        /** @type {?} */\n        const context = new CdkTreeNodeOutletContext(nodeData);\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        }\n        else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = (/** @type {?} */ (this._levels.get(parentData))) + 1;\n        }\n        else {\n            context.level = 0;\n        }\n        this._levels.set(nodeData, context.level);\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        /** @type {?} */\n        const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n}\nCdkTree.ɵfac = function CdkTree_Factory(t) { return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkTree.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkTree, selectors: [[\"cdk-tree\"]], contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n    } }, viewQuery: function CdkTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkTreeNodeOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"], inputs: { dataSource: \"dataSource\", treeControl: \"treeControl\", trackBy: \"trackBy\" }, exportAs: [\"cdkTree\"], decls: 1, vars: 0, consts: [[\"cdkTreeNodeOutlet\", \"\"]], template: function CdkTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkTreeNodeOutlet], encapsulation: 2 });\n/** @nocollapse */\nCdkTree.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef }\n];\nCdkTree.propDecorators = {\n    dataSource: [{ type: Input }],\n    treeControl: [{ type: Input }],\n    trackBy: [{ type: Input }],\n    _nodeOutlet: [{ type: ViewChild, args: [CdkTreeNodeOutlet, { static: true },] }],\n    _nodeDefs: [{ type: ContentChildren, args: [CdkTreeNodeDef, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTree, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-tree',\n                exportAs: 'cdkTree',\n                template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'cdk-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n                // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }]; }, { dataSource: [{\n            type: Input\n        }], treeControl: [{\n            type: Input\n        }], trackBy: [{\n            type: Input\n        }], _nodeOutlet: [{\n            type: ViewChild,\n            args: [CdkTreeNodeOutlet, { static: true }]\n        }], _nodeDefs: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeDef, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\nif (false) {\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._onDestroy;\n    /**\n     * Differ used to find the changes in the data provided by the data source.\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._dataDiffer;\n    /**\n     * Stores the node definition that does not have a when predicate.\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._defaultNodeDef;\n    /**\n     * Data subscription\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._dataSubscription;\n    /**\n     * Level of nodes\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._levels;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._dataSource;\n    /**\n     * The tree controller\n     * @type {?}\n     */\n    CdkTree.prototype.treeControl;\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\n     * relative to the function to know if a node should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     * @type {?}\n     */\n    CdkTree.prototype.trackBy;\n    /** @type {?} */\n    CdkTree.prototype._nodeOutlet;\n    /**\n     * The tree node template for the tree\n     * @type {?}\n     */\n    CdkTree.prototype._nodeDefs;\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     * @type {?}\n     */\n    CdkTree.prototype.viewChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._differs;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._changeDetectorRef;\n}\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n * @template T\n */\nclass CdkTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     */\n    constructor(_elementRef, _tree) {\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Emits when the node's data has changed.\n         */\n        this._dataChanges = new Subject();\n        /**\n         * The role of the node should be 'group' if it's an internal node,\n         * and 'treeitem' if it's a leaf node.\n         */\n        this.role = 'treeitem';\n        CdkTreeNode.mostRecentTreeNode = (/** @type {?} */ (this));\n    }\n    /**\n     * The tree node's data.\n     * @return {?}\n     */\n    get data() { return this._data; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) {\n        if (value !== this._data) {\n            this._data = value;\n            this._setRoleFromData();\n            this._dataChanges.next();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get isExpanded() {\n        return this._tree.treeControl.isExpanded(this._data);\n    }\n    /**\n     * @return {?}\n     */\n    get level() {\n        return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // If this is the last tree node being destroyed,\n        // clear out the reference to avoid leaking memory.\n        if (CdkTreeNode.mostRecentTreeNode === this) {\n            CdkTreeNode.mostRecentTreeNode = null;\n        }\n        this._dataChanges.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Focuses the menu item. Implements for FocusableOption.\n     * @return {?}\n     */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    _setRoleFromData() {\n        if (this._tree.treeControl.isExpandable) {\n            this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n        }\n        else {\n            if (!this._tree.treeControl.getChildren) {\n                throw getTreeControlFunctionsMissingError();\n            }\n            /** @type {?} */\n            const childrenNodes = this._tree.treeControl.getChildren(this._data);\n            if (Array.isArray(childrenNodes)) {\n                this._setRoleFromChildren((/** @type {?} */ (childrenNodes)));\n            }\n            else if (isObservable(childrenNodes)) {\n                childrenNodes.pipe(takeUntil(this._destroyed))\n                    .subscribe((/**\n                 * @param {?} children\n                 * @return {?}\n                 */\n                children => this._setRoleFromChildren(children)));\n            }\n        }\n    }\n    /**\n     * @protected\n     * @param {?} children\n     * @return {?}\n     */\n    _setRoleFromChildren(children) {\n        this.role = children && children.length ? 'group' : 'treeitem';\n    }\n}\nCdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) { return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree)); };\nCdkTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNode, selectors: [[\"cdk-tree-node\"]], hostAttrs: [1, \"cdk-tree-node\"], hostVars: 3, hostBindings: function CdkTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    } }, inputs: { role: \"role\" }, exportAs: [\"cdkTreeNode\"] });\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\nCdkTreeNode.mostRecentTreeNode = null;\n/** @nocollapse */\nCdkTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree }\n];\nCdkTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-tree-node',\n                exportAs: 'cdkTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                    '[attr.role]': 'role',\n                    'class': 'cdk-tree-node'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }]; }, { role: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n     * in `CdkTree` and set the data to it.\n     * @type {?}\n     */\n    CdkTreeNode.mostRecentTreeNode;\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNode.prototype._destroyed;\n    /**\n     * Emits when the node's data has changed.\n     * @type {?}\n     */\n    CdkTreeNode.prototype._dataChanges;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNode.prototype._data;\n    /**\n     * The role of the node should be 'group' if it's an internal node,\n     * and 'treeitem' if it's a leaf node.\n     * @type {?}\n     */\n    CdkTreeNode.prototype.role;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNode.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNode.prototype._tree;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/nested-node.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n * @template T\n */\nclass CdkNestedTreeNode extends CdkTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} _differs\n     */\n    constructor(_elementRef, _tree, _differs) {\n        super(_elementRef, _tree);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this._differs = _differs;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n        if (!this._tree.treeControl.getChildren) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        /** @type {?} */\n        const childrenNodes = this._tree.treeControl.getChildren(this.data);\n        if (Array.isArray(childrenNodes)) {\n            this.updateChildrenNodes((/** @type {?} */ (childrenNodes)));\n        }\n        else if (isObservable(childrenNodes)) {\n            childrenNodes.pipe(takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} result\n             * @return {?}\n             */\n            result => this.updateChildrenNodes(result)));\n        }\n        this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => this.updateChildrenNodes()));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._clear();\n        super.ngOnDestroy();\n    }\n    /**\n     * Add children dataNodes to the NodeOutlet\n     * @protected\n     * @param {?=} children\n     * @return {?}\n     */\n    updateChildrenNodes(children) {\n        /** @type {?} */\n        const outlet = this._getNodeOutlet();\n        if (children) {\n            this._children = children;\n        }\n        if (outlet && this._children) {\n            /** @type {?} */\n            const viewContainer = outlet.viewContainer;\n            this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        }\n        else {\n            // Reset the data differ if there's no children nodes displayed\n            this._dataDiffer.diff([]);\n        }\n    }\n    /**\n     * Clear the children dataNodes.\n     * @protected\n     * @return {?}\n     */\n    _clear() {\n        /** @type {?} */\n        const outlet = this._getNodeOutlet();\n        if (outlet) {\n            outlet.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    }\n    /**\n     * Gets the outlet for the current node.\n     * @private\n     * @return {?}\n     */\n    _getNodeOutlet() {\n        /** @type {?} */\n        const outlets = this.nodeOutlet;\n        // Note that since we use `descendants: true` on the query, we have to ensure\n        // that we don't pick up the outlet of a child node by accident.\n        return outlets && outlets.find((/**\n         * @param {?} outlet\n         * @return {?}\n         */\n        outlet => !outlet._node || outlet._node === this));\n    }\n}\nCdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) { return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkNestedTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkNestedTreeNode, selectors: [[\"cdk-nested-tree-node\"]], contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    } }, hostAttrs: [1, \"cdk-tree-node\", \"cdk-nested-tree-node\"], hostVars: 2, hostBindings: function CdkNestedTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    } }, exportAs: [\"cdkNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers }\n];\nCdkNestedTreeNode.propDecorators = {\n    nodeOutlet: [{ type: ContentChildren, args: [CdkTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-nested-tree-node',\n                exportAs: 'cdkNestedTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.role]': 'role',\n                    'class': 'cdk-tree-node cdk-nested-tree-node'\n                },\n                providers: [\n                    { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }, { type: ɵngcc0.IterableDiffers }]; }, { nodeOutlet: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\nif (false) {\n    /**\n     * Differ used to find the changes in the data provided by the data source.\n     * @type {?}\n     * @private\n     */\n    CdkNestedTreeNode.prototype._dataDiffer;\n    /**\n     * The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`.\n     * @type {?}\n     * @protected\n     */\n    CdkNestedTreeNode.prototype._children;\n    /**\n     * The children node placeholder.\n     * @type {?}\n     */\n    CdkNestedTreeNode.prototype.nodeOutlet;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkNestedTreeNode.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkNestedTreeNode.prototype._tree;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkNestedTreeNode.prototype._differs;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/padding.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Regex used to split a string on its CSS units.\n * @type {?}\n */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n * @template T\n */\nclass CdkTreeNodePadding {\n    /**\n     * @param {?} _treeNode\n     * @param {?} _tree\n     * @param {?} _renderer\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    constructor(_treeNode, _tree, _renderer, _element, _dir) {\n        this._treeNode = _treeNode;\n        this._tree = _tree;\n        this._renderer = _renderer;\n        this._element = _element;\n        this._dir = _dir;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * CSS units used for the indentation value.\n         */\n        this.indentUnits = 'px';\n        this._indent = 40;\n        this._setPadding();\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe((/**\n             * @return {?}\n             */\n            () => this._setPadding(true)));\n        }\n        // In Ivy the indentation binding might be set before the tree node's data has been added,\n        // which means that we'll miss the first render. We have to subscribe to changes in the\n        // data to ensure that everything is up to date.\n        _treeNode._dataChanges.subscribe((/**\n         * @return {?}\n         */\n        () => this._setPadding()));\n    }\n    /**\n     * The level of depth of the tree node. The padding will be `level * indent` pixels.\n     * @return {?}\n     */\n    get level() { return this._level; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set level(value) {\n        // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n        // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n        // they set 0 explicitly.\n        this._level = (/** @type {?} */ (coerceNumberProperty(value, null)));\n        this._setPadding();\n    }\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 40px from material design menu sub-menu spec.\n     * @return {?}\n     */\n    get indent() { return this._indent; }\n    /**\n     * @param {?} indent\n     * @return {?}\n     */\n    set indent(indent) {\n        /** @type {?} */\n        let value = indent;\n        /** @type {?} */\n        let units = 'px';\n        if (typeof indent === 'string') {\n            /** @type {?} */\n            const parts = indent.split(cssUnitPattern);\n            value = parts[0];\n            units = parts[1] || units;\n        }\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n        this._setPadding();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * The padding indent value for the tree node. Returns a string with px numbers if not null.\n     * @return {?}\n     */\n    _paddingIndent() {\n        /** @type {?} */\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n        /** @type {?} */\n        const level = this._level == null ? nodeLevel : this._level;\n        return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n    }\n    /**\n     * @param {?=} forceChange\n     * @return {?}\n     */\n    _setPadding(forceChange = false) {\n        /** @type {?} */\n        const padding = this._paddingIndent();\n        if (padding !== this._currentPadding || forceChange) {\n            /** @type {?} */\n            const element = this._element.nativeElement;\n            /** @type {?} */\n            const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n            /** @type {?} */\n            const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n            this._renderer.setStyle(element, paddingProp, padding);\n            this._renderer.setStyle(element, resetProp, null);\n            this._currentPadding = padding;\n        }\n    }\n}\nCdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) { return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nCdkTreeNodePadding.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodePadding, selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]], inputs: { level: [\"cdkTreeNodePadding\", \"level\"], indent: [\"cdkTreeNodePaddingIndent\", \"indent\"] } });\n/** @nocollapse */\nCdkTreeNodePadding.ctorParameters = () => [\n    { type: CdkTreeNode },\n    { type: CdkTree },\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['cdkTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['cdkTreeNodePaddingIndent',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodePadding]'\n            }]\n    }], function () { return [{ type: CdkTreeNode }, { type: CdkTree }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { level: [{\n            type: Input,\n            args: ['cdkTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['cdkTreeNodePaddingIndent']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkTreeNodePadding.ngAcceptInputType_level;\n    /**\n     * Current padding value applied to the element. Used to avoid unnecessarily hitting the DOM.\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._currentPadding;\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._destroyed;\n    /**\n     * CSS units used for the indentation value.\n     * @type {?}\n     */\n    CdkTreeNodePadding.prototype.indentUnits;\n    /** @type {?} */\n    CdkTreeNodePadding.prototype._level;\n    /** @type {?} */\n    CdkTreeNodePadding.prototype._indent;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._treeNode;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._tree;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._dir;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/toggle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Node toggle to expand/collapse the node.\n * @template T\n */\nclass CdkTreeNodeToggle {\n    /**\n     * @param {?} _tree\n     * @param {?} _treeNode\n     */\n    constructor(_tree, _treeNode) {\n        this._tree = _tree;\n        this._treeNode = _treeNode;\n        this._recursive = false;\n    }\n    /**\n     * Whether expand/collapse the node recursively.\n     * @return {?}\n     */\n    get recursive() { return this._recursive; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set recursive(value) { this._recursive = coerceBooleanProperty(value); }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _toggle(event) {\n        this.recursive\n            ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n            : this._tree.treeControl.toggle(this._treeNode.data);\n        event.stopPropagation();\n    }\n}\nCdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) { return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode)); };\nCdkTreeNodeToggle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeToggle, selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]], hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) { return ctx._toggle($event); });\n    } }, inputs: { recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"] } });\n/** @nocollapse */\nCdkTreeNodeToggle.ctorParameters = () => [\n    { type: CdkTree },\n    { type: CdkTreeNode }\n];\nCdkTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['cdkTreeNodeToggleRecursive',] }],\n    _toggle: [{ type: HostListener, args: ['click', ['$event'],] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n        type: Directive,\n        args: [{ selector: '[cdkTreeNodeToggle]' }]\n    }], function () { return [{ type: CdkTree }, { type: CdkTreeNode }]; }, { recursive: [{\n            type: Input,\n            args: ['cdkTreeNodeToggleRecursive']\n        }], _toggle: [{\n            type: HostListener,\n            args: ['click', ['$event']]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkTreeNodeToggle.ngAcceptInputType_recursive;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNodeToggle.prototype._recursive;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNodeToggle.prototype._tree;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNodeToggle.prototype._treeNode;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/tree-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet,\n];\nclass CdkTreeModule {\n}\nCdkTreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkTreeModule });\nCdkTreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CdkTreeModule_Factory(t) { return new (t || CdkTreeModule)(); }, providers: [FocusMonitor, CdkTreeNodeDef] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, { declarations: [CdkNestedTreeNode,\n        CdkTreeNodeDef,\n        CdkTreeNodePadding,\n        CdkTreeNodeToggle,\n        CdkTree,\n        CdkTreeNode,\n        CdkTreeNodeOutlet], exports: [CdkNestedTreeNode,\n        CdkTreeNodeDef,\n        CdkTreeNodePadding,\n        CdkTreeNodeToggle,\n        CdkTree,\n        CdkTreeNode,\n        CdkTreeNodeOutlet] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeModule, [{\n        type: NgModule,\n        args: [{\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS,\n                providers: [FocusMonitor, CdkTreeNodeDef]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };\n\n//# sourceMappingURL=tree.js.map","import { CdkTreeNode, CdkTree, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, ElementRef, Attribute, Input, IterableDiffers, ViewContainerRef, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/node.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\nconst _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n * @template T\n */\nclass MatTreeNode extends _MatTreeNodeMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} tabIndex\n     */\n    constructor(_elementRef, _tree, tabIndex) {\n        super(_elementRef, _tree);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this.role = 'treeitem';\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n}\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) { return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNode, selectors: [[\"mat-tree-node\"]], hostAttrs: [1, \"mat-tree-node\"], hostVars: 3, hostBindings: function MatTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    } }, inputs: { disabled: \"disabled\", tabIndex: \"tabIndex\", role: \"role\" }, exportAs: [\"matTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNode, useExisting: MatTreeNode }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-tree-node',\n                exportAs: 'matTreeNode',\n                inputs: ['disabled', 'tabIndex'],\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                    '[attr.role]': 'role',\n                    'class': 'mat-tree-node'\n                },\n                providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { role: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatTreeNode.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatTreeNode.prototype.role;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatTreeNode.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatTreeNode.prototype._tree;\n}\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * @template T\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n}\nMatTreeNodeDef.ɵfac = function MatTreeNodeDef_Factory(t) { return ɵMatTreeNodeDef_BaseFactory(t || MatTreeNodeDef); };\nMatTreeNodeDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeDef, selectors: [[\"\", \"matTreeNodeDef\", \"\"]], inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeDef.propDecorators = {\n    data: [{ type: Input, args: ['matTreeNode',] }]\n};\nconst ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeDef]',\n                inputs: [\n                    'when: matTreeNodeDefWhen'\n                ],\n                providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\n            }]\n    }], null, { data: [{\n            type: Input,\n            args: ['matTreeNode']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatTreeNodeDef.prototype.data;\n}\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n * @template T\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} _differs\n     * @param {?} tabIndex\n     */\n    constructor(_elementRef, _tree, _differs, tabIndex) {\n        super(_elementRef, _tree, _differs);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this._differs = _differs;\n        this._disabled = false;\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    /**\n     * Whether the node is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * Tabindex for the node.\n     * @return {?}\n     */\n    get tabIndex() { return this.disabled ? -1 : this._tabIndex; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tabIndex(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) { return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatNestedTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatNestedTreeNode, selectors: [[\"mat-nested-tree-node\"]], hostAttrs: [1, \"mat-nested-tree-node\"], hostVars: 2, hostBindings: function MatNestedTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    } }, inputs: { tabIndex: \"tabIndex\", disabled: \"disabled\", node: [\"matNestedTreeNode\", \"node\"] }, exportAs: [\"matNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatNestedTreeNode.propDecorators = {\n    node: [{ type: Input, args: ['matNestedTreeNode',] }],\n    disabled: [{ type: Input }],\n    tabIndex: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-nested-tree-node',\n                exportAs: 'matNestedTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.role]': 'role',\n                    'class': 'mat-nested-tree-node'\n                },\n                providers: [\n                    { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: ɵngcc0.IterableDiffers }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { tabIndex: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], node: [{\n            type: Input,\n            args: ['matNestedTreeNode']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatNestedTreeNode.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatNestedTreeNode.prototype.node;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatNestedTreeNode.prototype._disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatNestedTreeNode.prototype._tabIndex;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatNestedTreeNode.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatNestedTreeNode.prototype._tree;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatNestedTreeNode.prototype._differs;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/padding.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n * @template T\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n}\nMatTreeNodePadding.ɵfac = function MatTreeNodePadding_Factory(t) { return ɵMatTreeNodePadding_BaseFactory(t || MatTreeNodePadding); };\nMatTreeNodePadding.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodePadding, selectors: [[\"\", \"matTreeNodePadding\", \"\"]], inputs: { level: [\"matTreeNodePadding\", \"level\"], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['matTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['matTreeNodePaddingIndent',] }]\n};\nconst ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodePadding]',\n                providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\n            }]\n    }], null, { level: [{\n            type: Input,\n            args: ['matTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['matTreeNodePaddingIndent']\n        }] }); })();\nif (false) {\n    /**\n     * The level of depth of the tree node. The padding will be `level * indent` pixels.\n     * @type {?}\n     */\n    MatTreeNodePadding.prototype.level;\n    /**\n     * The indent for each level. Default number 40px from material design menu sub-menu spec.\n     * @type {?}\n     */\n    MatTreeNodePadding.prototype.indent;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/outlet.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?=} _node\n     */\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) { return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nMatTreeNodeOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeOutlet, selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkTreeNodeOutlet,\n                useExisting: MatTreeNodeOutlet\n            }])] });\n/** @nocollapse */\nMatTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeOutlet]',\n                providers: [{\n                        provide: CdkTreeNodeOutlet,\n                        useExisting: MatTreeNodeOutlet\n                    }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\nif (false) {\n    /** @type {?} */\n    MatTreeNodeOutlet.prototype.viewContainer;\n    /** @type {?} */\n    MatTreeNodeOutlet.prototype._node;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/tree.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nclass MatTree extends CdkTree {\n}\nMatTree.ɵfac = function MatTree_Factory(t) { return ɵMatTree_BaseFactory(t || MatTree); };\nMatTree.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatTree, selectors: [[\"mat-tree\"]], viewQuery: function MatTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(MatTreeNodeOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"], exportAs: [\"matTree\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTree, useExisting: MatTree }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"matTreeNodeOutlet\", \"\"]], template: function MatTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [MatTreeNodeOutlet], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"], encapsulation: 2 });\nMatTree.propDecorators = {\n    _nodeOutlet: [{ type: ViewChild, args: [MatTreeNodeOutlet, { static: true },] }]\n};\nconst ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTree, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tree',\n                exportAs: 'matTree',\n                template: `<ng-container matTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'mat-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // See note on CdkTree for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [{ provide: CdkTree, useExisting: MatTree }],\n                styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"]\n            }]\n    }], null, { _nodeOutlet: [{\n            type: ViewChild,\n            args: [MatTreeNodeOutlet, { static: true }]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatTree.prototype._nodeOutlet;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/toggle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n * @template T\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n    constructor() {\n        super(...arguments);\n        this.recursive = false;\n    }\n}\nMatTreeNodeToggle.ɵfac = function MatTreeNodeToggle_Factory(t) { return ɵMatTreeNodeToggle_BaseFactory(t || MatTreeNodeToggle); };\nMatTreeNodeToggle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeToggle, selectors: [[\"\", \"matTreeNodeToggle\", \"\"]], inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['matTreeNodeToggleRecursive',] }]\n};\nconst ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeToggle]',\n                providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\n            }]\n    }], null, { recursive: [{\n            type: Input,\n            args: ['matTreeNodeToggleRecursive']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatTreeNodeToggle.prototype.recursive;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/tree-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet\n];\nclass MatTreeModule {\n}\nMatTreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatTreeModule });\nMatTreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatTreeModule_Factory(t) { return new (t || MatTreeModule)(); }, imports: [[CdkTreeModule, MatCommonModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, { declarations: function () { return [MatNestedTreeNode,\n        MatTreeNodeDef,\n        MatTreeNodePadding,\n        MatTreeNodeToggle,\n        MatTree,\n        MatTreeNode,\n        MatTreeNodeOutlet]; }, imports: function () { return [CdkTreeModule, MatCommonModule]; }, exports: function () { return [MatNestedTreeNode,\n        MatTreeNodeDef,\n        MatTreeNodePadding,\n        MatTreeNodeToggle,\n        MatTree,\n        MatTreeNode,\n        MatTreeNodeOutlet]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CdkTreeModule, MatCommonModule],\n                exports: MAT_TREE_DIRECTIVES,\n                declarations: MAT_TREE_DIRECTIVES\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/data-source/flat-data-source.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n * @template T, F\n */\nclass MatTreeFlattener {\n    /**\n     * @param {?} transformFunction\n     * @param {?} getLevel\n     * @param {?} isExpandable\n     * @param {?} getChildren\n     */\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    /**\n     * @param {?} node\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n    _flattenNode(node, level, resultNodes, parentMap) {\n        /** @type {?} */\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            /** @type {?} */\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe((/**\n                     * @param {?} children\n                     * @return {?}\n                     */\n                    children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    }));\n                }\n            }\n        }\n        return resultNodes;\n    }\n    /**\n     * @param {?} children\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((/**\n         * @param {?} child\n         * @param {?} index\n         * @return {?}\n         */\n        (child, index) => {\n            /** @type {?} */\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        }));\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     * @param {?} structuredData\n     * @return {?}\n     */\n    flattenNodes(structuredData) {\n        /** @type {?} */\n        let resultNodes = [];\n        structuredData.forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => this._flattenNode(node, 0, resultNodes, [])));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     * @param {?} nodes\n     * @param {?} treeControl\n     * @return {?}\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        /** @type {?} */\n        let results = [];\n        /** @type {?} */\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => {\n            /** @type {?} */\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        }));\n        return results;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatTreeFlattener.prototype.transformFunction;\n    /** @type {?} */\n    MatTreeFlattener.prototype.getLevel;\n    /** @type {?} */\n    MatTreeFlattener.prototype.isExpandable;\n    /** @type {?} */\n    MatTreeFlattener.prototype.getChildren;\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n * @template T, F\n */\nclass MatTreeFlatDataSource extends DataSource {\n    /**\n     * @param {?} _treeControl\n     * @param {?} _treeFlattener\n     * @param {?=} initialData\n     */\n    constructor(_treeControl, _treeFlattener, initialData = []) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject(initialData);\n    }\n    /**\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    connect(collectionViewer) {\n        /** @type {?} */\n        const changes = [\n            collectionViewer.viewChange,\n            this._treeControl.expansionModel.changed,\n            this._flattenedData\n        ];\n        return merge(...changes).pipe(map((/**\n         * @return {?}\n         */\n        () => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        })));\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() {\n        // no op\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatTreeFlatDataSource.prototype._flattenedData;\n    /** @type {?} */\n    MatTreeFlatDataSource.prototype._expandedData;\n    /** @type {?} */\n    MatTreeFlatDataSource.prototype._data;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTreeFlatDataSource.prototype._treeControl;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTreeFlatDataSource.prototype._treeFlattener;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/data-source/nested-data-source.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n * @template T\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) { this._data.next(value); }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map((/**\n         * @return {?}\n         */\n        () => {\n            return this.data;\n        })));\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() {\n        // no op\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatTreeNestedDataSource.prototype._data;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\n\n//# sourceMappingURL=tree.js.map","import { SelectionModel } from '@angular/cdk/collections';\r\nimport { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { Component, Injectable } from '@angular/core';\r\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n\r\nexport class TodoItemNode {\r\n    children: TodoItemNode[];\r\n    item: string;\r\n}\r\n\r\n/** Flat to-do item node with expandable and level information */\r\nexport class TodoItemFlatNode {\r\n    item: string;\r\n    level: number;\r\n    expandable: boolean;\r\n}\r\n\r\n/**\r\n * The Json object for to-do list data.\r\n */\r\nconst TREE_DATA = {\r\n    Groceries: {\r\n        'Almond Meal flour': null,\r\n        'Organic eggs': null,\r\n        'Protein Powder': null,\r\n        Fruits: {\r\n            Apple: null,\r\n            Berries: ['Blueberry', 'Raspberry'],\r\n            Orange: null\r\n        }\r\n    },\r\n    Reminders: [\r\n        'Cook dinner',\r\n        'Read the Material Design spec',\r\n        'Upgrade Application to Angular'\r\n    ]\r\n};\r\n\r\n/**\r\n * Checklist database, it can build a tree structured Json object.\r\n * Each node in Json object represents a to-do item or a category.\r\n * If a node is a category, it has children items and new items can be added under the category.\r\n */\r\n@Injectable()\r\nexport class ChecklistDatabase {\r\n    dataChange = new BehaviorSubject<TodoItemNode[]>([]);\r\n\r\n    get data(): TodoItemNode[] { return this.dataChange.value; }\r\n\r\n    constructor() {\r\n        this.initialize();\r\n    }\r\n\r\n    initialize() {\r\n        // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\r\n        //     file node as children.\r\n        const data = this.buildFileTree(TREE_DATA, 0);\r\n\r\n        // Notify the change.\r\n        this.dataChange.next(data);\r\n    }\r\n\r\n    /**\r\n     * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\r\n     * The return value is the list of `TodoItemNode`.\r\n     */\r\n    buildFileTree(obj: { [key: string]: any }, level: number): TodoItemNode[] {\r\n        return Object.keys(obj).reduce<TodoItemNode[]>((accumulator, key) => {\r\n            const value = obj[key];\r\n            const node = new TodoItemNode();\r\n            node.item = key;\r\n\r\n            if (value != null) {\r\n                if (typeof value === 'object') {\r\n                    node.children = this.buildFileTree(value, level + 1);\r\n                } else {\r\n                    node.item = value;\r\n                }\r\n            }\r\n\r\n            return accumulator.concat(node);\r\n        }, []);\r\n    }\r\n\r\n    /** Add an item to to-do list */\r\n    insertItem(parent: TodoItemNode, name: string) {\r\n        if (parent.children) {\r\n            parent.children.push({ item: name } as TodoItemNode);\r\n            this.dataChange.next(this.data);\r\n        }\r\n    }\r\n\r\n    updateItem(node: TodoItemNode, name: string) {\r\n        node.item = name;\r\n        this.dataChange.next(this.data);\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'app-check-tree',\r\n    templateUrl: './check-tree.component.html',\r\n    styleUrls: ['./check-tree.component.scss'],\r\n    providers: [ChecklistDatabase]\r\n})\r\nexport class ChecktreeComponent {\r\n\r\n    flatNodeMap = new Map<TodoItemFlatNode, TodoItemNode>();\r\n\r\n    /** Map from nested node to flattened node. This helps us to keep the same object for selection */\r\n    nestedNodeMap = new Map<TodoItemNode, TodoItemFlatNode>();\r\n\r\n    /** A selected parent node to be inserted */\r\n    selectedParent: TodoItemFlatNode | null = null;\r\n\r\n    /** The new item's name */\r\n    newItemName = '';\r\n\r\n    treeControl: FlatTreeControl<TodoItemFlatNode>;\r\n\r\n    treeFlattener: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;\r\n\r\n    dataSource: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;\r\n\r\n    /** The selection for checklist */\r\n    checklistSelection = new SelectionModel<TodoItemFlatNode>(true /* multiple */);\r\n\r\n    constructor(private _database: ChecklistDatabase) {\r\n        this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,\r\n            this.isExpandable, this.getChildren);\r\n        this.treeControl = new FlatTreeControl<TodoItemFlatNode>(this.getLevel, this.isExpandable);\r\n        this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n\r\n        _database.dataChange.subscribe(data => {\r\n            this.dataSource.data = data;\r\n        });\r\n    }\r\n\r\n    getLevel = (node: TodoItemFlatNode) => node.level;\r\n\r\n    isExpandable = (node: TodoItemFlatNode) => node.expandable;\r\n\r\n    getChildren = (node: TodoItemNode): TodoItemNode[] => node.children;\r\n\r\n    hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\r\n\r\n    hasNoContent = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.item === '';\r\n\r\n    /**\r\n     * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\r\n     */\r\n    transformer = (node: TodoItemNode, level: number) => {\r\n        const existingNode = this.nestedNodeMap.get(node);\r\n        const flatNode = existingNode && existingNode.item === node.item\r\n            ? existingNode\r\n            : new TodoItemFlatNode();\r\n        flatNode.item = node.item;\r\n        flatNode.level = level;\r\n        flatNode.expandable = !!node.children;\r\n        this.flatNodeMap.set(flatNode, node);\r\n        this.nestedNodeMap.set(node, flatNode);\r\n        return flatNode;\r\n    }\r\n\r\n    /** Whether all the descendants of the node are selected. */\r\n    descendantsAllSelected(node: TodoItemFlatNode): boolean {\r\n        const descendants = this.treeControl.getDescendants(node);\r\n        const descAllSelected = descendants.every(child =>\r\n            this.checklistSelection.isSelected(child)\r\n        );\r\n        return descAllSelected;\r\n    }\r\n\r\n    /** Whether part of the descendants are selected */\r\n    descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\r\n        const descendants = this.treeControl.getDescendants(node);\r\n        const result = descendants.some(child => this.checklistSelection.isSelected(child));\r\n        return result && !this.descendantsAllSelected(node);\r\n    }\r\n\r\n    /** Toggle the to-do item selection. Select/deselect all the descendants node */\r\n    todoItemSelectionToggle(node: TodoItemFlatNode): void {\r\n        this.checklistSelection.toggle(node);\r\n        const descendants = this.treeControl.getDescendants(node);\r\n        this.checklistSelection.isSelected(node)\r\n            ? this.checklistSelection.select(...descendants)\r\n            : this.checklistSelection.deselect(...descendants);\r\n\r\n        // Force update for the parent\r\n        descendants.every(child =>\r\n            this.checklistSelection.isSelected(child)\r\n        );\r\n        this.checkAllParentsSelection(node);\r\n    }\r\n\r\n    /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\r\n    todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {\r\n        this.checklistSelection.toggle(node);\r\n        this.checkAllParentsSelection(node);\r\n    }\r\n\r\n    /* Checks all the parents when a leaf node is selected/unselected */\r\n    checkAllParentsSelection(node: TodoItemFlatNode): void {\r\n        let parent: TodoItemFlatNode | null = this.getParentNode(node);\r\n        while (parent) {\r\n            this.checkRootNodeSelection(parent);\r\n            parent = this.getParentNode(parent);\r\n        }\r\n    }\r\n\r\n    /** Check root node checked state and change it accordingly */\r\n    checkRootNodeSelection(node: TodoItemFlatNode): void {\r\n        const nodeSelected = this.checklistSelection.isSelected(node);\r\n        const descendants = this.treeControl.getDescendants(node);\r\n        const descAllSelected = descendants.every(child =>\r\n            this.checklistSelection.isSelected(child)\r\n        );\r\n        if (nodeSelected && !descAllSelected) {\r\n            this.checklistSelection.deselect(node);\r\n        } else if (!nodeSelected && descAllSelected) {\r\n            this.checklistSelection.select(node);\r\n        }\r\n    }\r\n\r\n    /* Get the parent node of a node */\r\n    getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\r\n        const currentLevel = this.getLevel(node);\r\n\r\n        if (currentLevel < 1) {\r\n            return null;\r\n        }\r\n\r\n        const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\r\n\r\n        for (let i = startIndex; i >= 0; i--) {\r\n            const currentNode = this.treeControl.dataNodes[i];\r\n\r\n            if (this.getLevel(currentNode) < currentLevel) {\r\n                return currentNode;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** Select the category so we can insert the new item. */\r\n    addNewItem(node: TodoItemFlatNode) {\r\n        const parentNode = this.flatNodeMap.get(node);\r\n        this._database.insertItem(parentNode!, '');\r\n        this.treeControl.expand(node);\r\n    }\r\n\r\n    /** Save the node to database */\r\n    saveNode(node: TodoItemFlatNode, itemValue: string) {\r\n        const nestedNode = this.flatNodeMap.get(node);\r\n        this._database.updateItem(nestedNode!, itemValue);\r\n    }\r\n}\r\n","<mat-card>\r\n    <mat-card-content>\r\n        <mat-card-title>Tree with checkboxes</mat-card-title>\r\n        <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n            <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle matTreeNodePadding>\r\n                <button mat-icon-button disabled></button>\r\n                <mat-checkbox class=\"checklist-leaf-node\" [checked]=\"checklistSelection.isSelected(node)\"\r\n                    (change)=\"todoLeafItemSelectionToggle(node)\">{{node.item}}</mat-checkbox>\r\n            </mat-tree-node>\r\n\r\n            <mat-tree-node *matTreeNodeDef=\"let node; when: hasNoContent\" matTreeNodePadding>\r\n                <button mat-icon-button disabled></button>\r\n                <mat-form-field>\r\n                    <mat-label>New item...</mat-label>\r\n                    <input matInput #itemValue placeholder=\"Ex. Lettuce\">\r\n                </mat-form-field>\r\n                <button mat-button (click)=\"saveNode(node, itemValue.value)\">Save</button>\r\n            </mat-tree-node>\r\n\r\n            <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\r\n                <button mat-icon-button matTreeNodeToggle [attr.aria-label]=\"'toggle ' + node.filename\">\r\n                    <mat-icon class=\"mat-icon-rtl-mirror\">\r\n                        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n                    </mat-icon>\r\n                </button>\r\n                <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\r\n                    [indeterminate]=\"descendantsPartiallySelected(node)\" (change)=\"todoItemSelectionToggle(node)\">\r\n                    {{node.item}}</mat-checkbox>\r\n                <button mat-icon-button (click)=\"addNewItem(node)\">\r\n                    <mat-icon>add</mat-icon>\r\n                </button>\r\n            </mat-tree-node>\r\n        </mat-tree>\r\n    </mat-card-content>\r\n</mat-card>","import { CollectionViewer, SelectionChange, DataSource } from '@angular/cdk/collections';\r\nimport { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { Component, Injectable } from '@angular/core';\r\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport class DynamicFlatNode {\r\n    constructor(public item: string, public level = 1, public expandable = false,\r\n        public isLoading = false) { }\r\n}\r\n\r\n/**\r\n * Database for dynamic data. When expanding a node in the tree, the data source will need to fetch\r\n * the descendants data from the database.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class DynamicDatabase {\r\n    dataMap = new Map<string, string[]>([\r\n        ['Fruits', ['Apple', 'Orange', 'Banana']],\r\n        ['Vegetables', ['Tomato', 'Potato', 'Onion']],\r\n        ['Apple', ['Fuji', 'Macintosh']],\r\n        ['Onion', ['Yellow', 'White', 'Purple']]\r\n    ]);\r\n\r\n    rootLevelNodes: string[] = ['Fruits', 'Vegetables'];\r\n\r\n    /** Initial data from database */\r\n    initialData(): DynamicFlatNode[] {\r\n        return this.rootLevelNodes.map(name => new DynamicFlatNode(name, 0, true));\r\n    }\r\n\r\n    getChildren(node: string): string[] | undefined {\r\n        return this.dataMap.get(node);\r\n    }\r\n\r\n    isExpandable(node: string): boolean {\r\n        return this.dataMap.has(node);\r\n    }\r\n}\r\n/**\r\n * File database, it can build a tree structured Json object from string.\r\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\r\n * For a directory, it has filename and children (a list of files or directories).\r\n * The input will be a json object string, and the output is a list of `FileNode` with nested\r\n * structure.\r\n */\r\nexport class DynamicDataSource implements DataSource<DynamicFlatNode> {\r\n\r\n    dataChange = new BehaviorSubject<DynamicFlatNode[]>([]);\r\n\r\n    get data(): DynamicFlatNode[] { return this.dataChange.value; }\r\n    set data(value: DynamicFlatNode[]) {\r\n        this._treeControl.dataNodes = value;\r\n        this.dataChange.next(value);\r\n    }\r\n\r\n    constructor(private _treeControl: FlatTreeControl<DynamicFlatNode>,\r\n        private _database: DynamicDatabase) { }\r\n\r\n    connect(collectionViewer: CollectionViewer): Observable<DynamicFlatNode[]> {\r\n        this._treeControl.expansionModel.changed.subscribe(change => {\r\n            if ((change as SelectionChange<DynamicFlatNode>).added ||\r\n                (change as SelectionChange<DynamicFlatNode>).removed) {\r\n                this.handleTreeControl(change as SelectionChange<DynamicFlatNode>);\r\n            }\r\n        });\r\n\r\n        return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\r\n    }\r\n\r\n    disconnect(collectionViewer: CollectionViewer): void { }\r\n\r\n    /** Handle expand/collapse behaviors */\r\n    handleTreeControl(change: SelectionChange<DynamicFlatNode>) {\r\n        if (change.added) {\r\n            change.added.forEach(node => this.toggleNode(node, true));\r\n        }\r\n        if (change.removed) {\r\n            change.removed.slice().reverse().forEach(node => this.toggleNode(node, false));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Toggle the node, remove from display list\r\n     */\r\n    toggleNode(node: DynamicFlatNode, expand: boolean) {\r\n        const children = this._database.getChildren(node.item);\r\n        const index = this.data.indexOf(node);\r\n        if (!children || index < 0) { // If no children, or cannot find the node, no op\r\n            return;\r\n        }\r\n\r\n        node.isLoading = true;\r\n\r\n        setTimeout(() => {\r\n            if (expand) {\r\n                const nodes = children.map(name =>\r\n                    new DynamicFlatNode(name, node.level + 1, this._database.isExpandable(name)));\r\n                this.data.splice(index + 1, 0, ...nodes);\r\n            } else {\r\n                let count = 0;\r\n                for (let i = index + 1; i < this.data.length\r\n                    && this.data[i].level > node.level; i++ , count++) { }\r\n                this.data.splice(index + 1, count);\r\n            }\r\n\r\n            // notify the change\r\n            this.dataChange.next(this.data);\r\n            node.isLoading = false;\r\n        }, 1000);\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'app-dynamic-tree',\r\n    templateUrl: './dynamic-tree.component.html',\r\n    styleUrls: ['./dynamic-tree.component.scss']\r\n})\r\nexport class DynamictreeComponent {\r\n\r\n    constructor(database: DynamicDatabase) {\r\n        this.treeControl = new FlatTreeControl<DynamicFlatNode>(this.getLevel, this.isExpandable);\r\n        this.dataSource = new DynamicDataSource(this.treeControl, database);\r\n\r\n        this.dataSource.data = database.initialData();\r\n    }\r\n\r\n    treeControl: FlatTreeControl<DynamicFlatNode>;\r\n\r\n    dataSource: DynamicDataSource;\r\n\r\n    getLevel = (node: DynamicFlatNode) => node.level;\r\n\r\n    isExpandable = (node: DynamicFlatNode) => node.expandable;\r\n\r\n    hasChild = (_: number, _nodeData: DynamicFlatNode) => _nodeData.expandable;\r\n}\r\n","<mat-card>\r\n    <mat-card-content>\r\n        <mat-card-title>Tree with dynamic data</mat-card-title>\r\n        <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n            <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\r\n                <button mat-icon-button disabled></button>\r\n                {{node.item}}\r\n            </mat-tree-node>\r\n            <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\r\n                <button mat-icon-button [attr.aria-label]=\"'toggle ' + node.filename\" matTreeNodeToggle>\r\n                    <mat-icon class=\"mat-icon-rtl-mirror\">\r\n                        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n                    </mat-icon>\r\n                </button>\r\n                {{node.item}}\r\n                <mat-progress-bar *ngIf=\"node.isLoading\" mode=\"indeterminate\" class=\"example-tree-progress-bar\">\r\n                </mat-progress-bar>\r\n            </mat-tree-node>\r\n        </mat-tree>\r\n    </mat-card-content>\r\n</mat-card>","import { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { Component } from '@angular/core';\r\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\r\n\r\ninterface FoodNode {\r\n    name: string;\r\n    children?: FoodNode[];\r\n}\r\n\r\nconst TREE_DATA: FoodNode[] = [\r\n    {\r\n        name: 'Fruit',\r\n        children: [\r\n            { name: 'Apple' },\r\n            { name: 'Banana' },\r\n            { name: 'Fruit loops' },\r\n        ]\r\n    }, {\r\n        name: 'Vegetables',\r\n        children: [\r\n            {\r\n                name: 'Green',\r\n                children: [\r\n                    { name: 'Broccoli' },\r\n                    { name: 'Brussels sprouts' },\r\n                ]\r\n            }, {\r\n                name: 'Orange',\r\n                children: [\r\n                    { name: 'Pumpkins' },\r\n                    { name: 'Carrots' },\r\n                ]\r\n            },\r\n        ]\r\n    },\r\n];\r\n\r\n/** Flat node with expandable and level information */\r\ninterface ExampleFlatNode {\r\n    expandable: boolean;\r\n    name: string;\r\n    level: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-flat-tree',\r\n    templateUrl: './flat-tree.component.html',\r\n    styleUrls: ['./flat-tree.component.scss']\r\n})\r\nexport class FlattreeComponent {\r\n\r\n    private _transformer = (node: FoodNode, level: number) => {\r\n        return {\r\n            expandable: !!node.children && node.children.length > 0,\r\n            name: node.name,\r\n            level: level,\r\n        };\r\n    }\r\n\r\n    treeControl = new FlatTreeControl<ExampleFlatNode>(\r\n        node => node.level, node => node.expandable);\r\n\r\n    treeFlattener = new MatTreeFlattener(\r\n        this._transformer, node => node.level, node => node.expandable, node => node.children);\r\n\r\n    dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n\r\n    constructor() {\r\n        this.dataSource.data = TREE_DATA;\r\n    }\r\n\r\n    hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\r\n}\r\n","<mat-card>\r\n    <mat-card-content>\r\n        <mat-card-title>Tree with flat nodes</mat-card-title>\r\n        <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n            <!-- This is the tree node template for leaf nodes -->\r\n            <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\r\n                <!-- use a disabled button to provide padding for tree leaf -->\r\n                <button mat-icon-button disabled></button>\r\n                {{node.name}}\r\n            </mat-tree-node>\r\n            <!-- This is the tree node template for expandable nodes -->\r\n            <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding>\r\n                <button mat-icon-button matTreeNodeToggle [attr.aria-label]=\"'toggle ' + node.name\">\r\n                    <mat-icon class=\"mat-icon-rtl-mirror\">\r\n                        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n                    </mat-icon>\r\n                </button>\r\n                {{node.name}}\r\n            </mat-tree-node>\r\n        </mat-tree>\r\n    </mat-card-content>\r\n</mat-card>","import { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { Component, Injectable } from '@angular/core';\r\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n\r\nconst LOAD_MORE = 'LOAD_MORE';\r\n\r\n/** Nested node */\r\nexport class LoadmoreNode {\r\n    childrenChange = new BehaviorSubject<LoadmoreNode[]>([]);\r\n\r\n    get children(): LoadmoreNode[] {\r\n        return this.childrenChange.value;\r\n    }\r\n\r\n    constructor(public item: string,\r\n        public hasChildren = false,\r\n        public loadMoreParentItem: string | null = null) { }\r\n}\r\n\r\n/** Flat node with expandable and level information */\r\nexport class LoadmoreFlatNode {\r\n    constructor(public item: string,\r\n        public level = 1,\r\n        public expandable = false,\r\n        public loadMoreParentItem: string | null = null) { }\r\n}\r\n\r\n/**\r\n * A database that only load part of the data initially. After user clicks on the `Load more`\r\n * button, more data will be loaded.\r\n */\r\n@Injectable()\r\nexport class LoadmoreDatabase {\r\n    batchNumber = 5;\r\n    dataChange = new BehaviorSubject<LoadmoreNode[]>([]);\r\n    nodeMap = new Map<string, LoadmoreNode>();\r\n\r\n    /** The data */\r\n    rootLevelNodes: string[] = ['Vegetables', 'Fruits'];\r\n    dataMap = new Map<string, string[]>([\r\n        ['Fruits', ['Apple', 'Orange', 'Banana']],\r\n        ['Vegetables', ['Tomato', 'Potato', 'Onion']],\r\n        ['Apple', ['Fuji', 'Macintosh']],\r\n        ['Onion', ['Yellow', 'White', 'Purple', 'Green', 'Shallot', 'Sweet', 'Red', 'Leek']],\r\n    ]);\r\n\r\n    initialize() {\r\n        const data = this.rootLevelNodes.map(name => this._generateNode(name));\r\n        this.dataChange.next(data);\r\n    }\r\n\r\n    /** Expand a node whose children are not loaded */\r\n    loadMore(item: string, onlyFirstTime = false) {\r\n        if (!this.nodeMap.has(item) || !this.dataMap.has(item)) {\r\n            return;\r\n        }\r\n        const parent = this.nodeMap.get(item)!;\r\n        const children = this.dataMap.get(item)!;\r\n        if (onlyFirstTime && parent.children!.length > 0) {\r\n            return;\r\n        }\r\n        const newChildrenNumber = parent.children!.length + this.batchNumber;\r\n        const nodes = children.slice(0, newChildrenNumber)\r\n            .map(name => this._generateNode(name));\r\n        if (newChildrenNumber < children.length) {\r\n            // Need a new load more node\r\n            nodes.push(new LoadmoreNode(LOAD_MORE, false, item));\r\n        }\r\n\r\n        parent.childrenChange.next(nodes);\r\n        this.dataChange.next(this.dataChange.value);\r\n    }\r\n\r\n    private _generateNode(item: string): LoadmoreNode {\r\n        if (this.nodeMap.has(item)) {\r\n            return this.nodeMap.get(item)!;\r\n        }\r\n        const result = new LoadmoreNode(item, this.dataMap.has(item));\r\n        this.nodeMap.set(item, result);\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\n@Component({\r\n    selector: 'app-load-tree',\r\n    templateUrl: './load-tree.component.html',\r\n    styleUrls: ['./load-tree.component.scss'],\r\n    providers: [LoadmoreDatabase]\r\n})\r\nexport class LoadtreeComponent {\r\n\r\n    nodeMap = new Map<string, LoadmoreFlatNode>();\r\n    treeControl: FlatTreeControl<LoadmoreFlatNode>;\r\n    treeFlattener: MatTreeFlattener<LoadmoreNode, LoadmoreFlatNode>;\r\n    // Flat tree data source\r\n    dataSource: MatTreeFlatDataSource<LoadmoreNode, LoadmoreFlatNode>;\r\n\r\n    constructor(private _database: LoadmoreDatabase) {\r\n        this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,\r\n            this.isExpandable, this.getChildren);\r\n\r\n        this.treeControl = new FlatTreeControl<LoadmoreFlatNode>(this.getLevel, this.isExpandable);\r\n\r\n        this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n\r\n        _database.dataChange.subscribe(data => {\r\n            this.dataSource.data = data;\r\n        });\r\n\r\n        _database.initialize();\r\n    }\r\n\r\n    getChildren = (node: LoadmoreNode): Observable<LoadmoreNode[]> => node.childrenChange;\r\n\r\n    transformer = (node: LoadmoreNode, level: number) => {\r\n        const existingNode = this.nodeMap.get(node.item);\r\n\r\n        if (existingNode) {\r\n            return existingNode;\r\n        }\r\n\r\n        const newNode =\r\n            new LoadmoreFlatNode(node.item, level, node.hasChildren, node.loadMoreParentItem);\r\n        this.nodeMap.set(node.item, newNode);\r\n        return newNode;\r\n    }\r\n\r\n    getLevel = (node: LoadmoreFlatNode) => node.level;\r\n\r\n    isExpandable = (node: LoadmoreFlatNode) => node.expandable;\r\n\r\n    hasChild = (_: number, _nodeData: LoadmoreFlatNode) => _nodeData.expandable;\r\n\r\n    isLoadMore = (_: number, _nodeData: LoadmoreFlatNode) => _nodeData.item === LOAD_MORE;\r\n\r\n    /** Load more nodes from data source */\r\n    loadMore(item: string) {\r\n        this._database.loadMore(item);\r\n    }\r\n\r\n    loadChildren(node: LoadmoreFlatNode) {\r\n        this._database.loadMore(node.item, true);\r\n    }\r\n}\r\n","<mat-card>\r\n    <mat-card-content>\r\n        <mat-card-title>Tree with partially loaded data</mat-card-title>\r\n        <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n            <!-- Leaf node -->\r\n            <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\r\n                <button mat-icon-button disabled></button>\r\n                {{node.item}}\r\n            </mat-tree-node>\r\n\r\n            <!-- expandable node -->\r\n            <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\r\n                <button mat-icon-button [attr.aria-label]=\"'toggle ' + node.filename\" (click)=\"loadChildren(node)\"\r\n                    matTreeNodeToggle>\r\n                    <mat-icon class=\"mat-icon-rtl-mirror\">\r\n                        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n                    </mat-icon>\r\n                </button>\r\n                {{node.item}}\r\n            </mat-tree-node>\r\n\r\n            <mat-tree-node *matTreeNodeDef=\"let node; when: isLoadMore\">\r\n                <button mat-button (click)=\"loadMore(node.loadMoreParentItem)\">\r\n                    Load more...\r\n                </button>\r\n            </mat-tree-node>\r\n        </mat-tree>\r\n    </mat-card-content>\r\n</mat-card>","import { NestedTreeControl } from '@angular/cdk/tree';\r\nimport { Component } from '@angular/core';\r\nimport { MatTreeNestedDataSource } from '@angular/material/tree';\r\n\r\n/**\r\n * Food data with nested structure.\r\n * Each node has a name and an optional list of children.\r\n */\r\ninterface FoodNode {\r\n    name: string;\r\n    children?: FoodNode[];\r\n}\r\n\r\nconst TREE_DATA: FoodNode[] = [\r\n    {\r\n        name: 'Fruit',\r\n        children: [\r\n            { name: 'Apple' },\r\n            { name: 'Banana' },\r\n            { name: 'Fruit loops' },\r\n        ]\r\n    }, {\r\n        name: 'Vegetables',\r\n        children: [\r\n            {\r\n                name: 'Green',\r\n                children: [\r\n                    { name: 'Broccoli' },\r\n                    { name: 'Brussels sprouts' },\r\n                ]\r\n            }, {\r\n                name: 'Orange',\r\n                children: [\r\n                    { name: 'Pumpkins' },\r\n                    { name: 'Carrots' },\r\n                ]\r\n            },\r\n        ]\r\n    },\r\n];\r\n\r\n\r\n@Component({\r\n    selector: 'app-nested-tree',\r\n    templateUrl: './nested-tree.component.html',\r\n    styleUrls: ['./nested-tree.component.scss']\r\n})\r\nexport class NestedtreeComponent {\r\n\r\n    treeControl = new NestedTreeControl<FoodNode>(node => node.children);\r\n    dataSource = new MatTreeNestedDataSource<FoodNode>();\r\n\r\n    constructor() {\r\n        this.dataSource.data = TREE_DATA;\r\n    }\r\n\r\n    hasChild = (_: number, node: FoodNode) => !!node.children && node.children.length > 0;\r\n}\r\n","<mat-card>\r\n    <mat-card-content>\r\n        <mat-card-title>Tree with nested nodes</mat-card-title>\r\n        <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" class=\"example-tree\">\r\n            <!-- This is the tree node template for leaf nodes -->\r\n            <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle>\r\n                <li class=\"mat-tree-node\">\r\n                    <!-- use a disabled button to provide padding for tree leaf -->\r\n                    <button mat-icon-button disabled></button>\r\n                    {{node.name}}\r\n                </li>\r\n            </mat-tree-node>\r\n            <!-- This is the tree node template for expandable nodes -->\r\n            <mat-nested-tree-node *matTreeNodeDef=\"let node; when: hasChild\">\r\n                <li>\r\n                    <div class=\"mat-tree-node\">\r\n                        <button mat-icon-button matTreeNodeToggle [attr.aria-label]=\"'toggle ' + node.name\">\r\n                            <mat-icon class=\"mat-icon-rtl-mirror\">\r\n                                {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n                            </mat-icon>\r\n                        </button>\r\n                        {{node.name}}\r\n                    </div>\r\n                    <ul [class.example-tree-invisible]=\"!treeControl.isExpanded(node)\">\r\n                        <ng-container matTreeNodeOutlet></ng-container>\r\n                    </ul>\r\n                </li>\r\n            </mat-nested-tree-node>\r\n        </mat-tree>\r\n    </mat-card-content>\r\n</mat-card>","import 'hammerjs';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DemoMaterialModule } from '../demo-material-module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { TreeRoutes } from './tree.routing';\r\n\r\n\r\nimport { ChecktreeComponent } from './check-tree/check-tree.component';\r\nimport { DynamictreeComponent } from './dynamic-tree/dynamic-tree.component';\r\nimport { FlattreeComponent } from './flat-tree/flat-tree.component';\r\nimport { LoadtreeComponent } from './load-tree/load-tree.component';\r\nimport { NestedtreeComponent } from './nested-tree/nested-tree.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        RouterModule.forChild(TreeRoutes),\r\n        DemoMaterialModule,\r\n        FlexLayoutModule,\r\n        FormsModule,\r\n        MatTreeModule,\r\n        ReactiveFormsModule\r\n    ],\r\n    declarations: [\r\n        ChecktreeComponent,\r\n        DynamictreeComponent,\r\n        FlattreeComponent,\r\n        LoadtreeComponent,\r\n        NestedtreeComponent\r\n    ]\r\n})\r\nexport class TreeModule { }\r\n","import { Routes } from '@angular/router';\r\n\r\nimport { ChecktreeComponent } from './check-tree/check-tree.component';\r\nimport { DynamictreeComponent } from './dynamic-tree/dynamic-tree.component';\r\nimport { FlattreeComponent } from './flat-tree/flat-tree.component';\r\nimport { LoadtreeComponent } from './load-tree/load-tree.component';\r\nimport { NestedtreeComponent } from './nested-tree/nested-tree.component';\r\n\r\nexport const TreeRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        children: [\r\n            {\r\n                path: 'check-tree',\r\n                component: ChecktreeComponent,\r\n                data: {\r\n                    title: 'Checkbox with tree',\r\n                    urls: [\r\n                        { title: 'Dashboard', url: '/dashboard' },\r\n                        { title: 'Checkbox with tree' }\r\n                    ]\r\n                }\r\n            },\r\n            {\r\n                path: 'dynamic-tree',\r\n                component: DynamictreeComponent,\r\n                data: {\r\n                    title: 'Dynamic Data with tree',\r\n                    urls: [\r\n                        { title: 'Dashboard', url: '/dashboard' },\r\n                        { title: 'Dynamic Data with tree' }\r\n                    ]\r\n                }\r\n            },\r\n            {\r\n                path: 'flat-tree',\r\n                component: FlattreeComponent,\r\n                data: {\r\n                    title: 'Flat Data with Tree',\r\n                    urls: [\r\n                        { title: 'Dashboard', url: '/dashboard' },\r\n                        { title: 'Flat Data with Tree' }\r\n                    ]\r\n                }\r\n            },\r\n            {\r\n                path: 'load-tree',\r\n                component: LoadtreeComponent,\r\n                data: {\r\n                    title: 'Loaded Data with Tree',\r\n                    urls: [\r\n                        { title: 'Dashboard', url: '/dashboard' },\r\n                        { title: 'Loaded Data with Tree' }\r\n                    ]\r\n                }\r\n            },\r\n            {\r\n                path: 'nested-tree',\r\n                component: NestedtreeComponent,\r\n                data: {\r\n                    title: 'Nested Tree',\r\n                    urls: [\r\n                        { title: 'Dashboard', url: '/dashboard' },\r\n                        { title: 'Nested Tree' }\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    }\r\n];\r\n"],"sourceRoot":"webpack:///"}