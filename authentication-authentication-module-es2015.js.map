{"version":3,"sources":["./src/app/authentication/authentication.module.ts","./src/app/authentication/authentication.routing.ts","./src/app/authentication/error/error.component.ts","./src/app/authentication/error/error.component.html","./src/app/authentication/forgot/forgot.component.ts","./src/app/authentication/forgot/forgot.component.html","./src/app/authentication/lockscreen/lockscreen.component.ts","./src/app/authentication/lockscreen/lockscreen.component.html","./src/app/authentication/login/login.component.ts","./src/app/authentication/login/login.component.html","./src/app/authentication/register/register.component.ts","./src/app/authentication/register/register.component.html"],"names":[],"mappings":"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","file":"authentication-authentication-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n    MatIconModule\r\n} from '@angular/material/icon';\r\nimport {\r\n    MatCardModule,\r\n} from '@angular/material/card';\r\nimport {\r\n    MatInputModule\r\n} from '@angular/material/input';\r\nimport {\r\n    MatCheckboxModule\r\n} from '@angular/material/checkbox';\r\nimport {\r\n    MatButtonModule\r\n} from '@angular/material/button';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\n\r\nimport { AuthenticationRoutes } from './authentication.routing';\r\nimport { ErrorComponent } from './error/error.component';\r\nimport { ForgotComponent } from './forgot/forgot.component';\r\nimport { LockscreenComponent } from './lockscreen/lockscreen.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        RouterModule.forChild(AuthenticationRoutes),\r\n        MatIconModule,\r\n        MatCardModule,\r\n        MatInputModule,\r\n        MatCheckboxModule,\r\n        MatButtonModule,\r\n        FlexLayoutModule,\r\n        FormsModule,\r\n        ReactiveFormsModule\r\n    ],\r\n    declarations: [\r\n        ErrorComponent,\r\n        ForgotComponent,\r\n        LockscreenComponent,\r\n        LoginComponent,\r\n        RegisterComponent\r\n    ]\r\n})\r\nexport class AuthenticationModule { }\r\n","import { Routes } from '@angular/router';\r\n\r\nimport { ErrorComponent } from './error/error.component';\r\nimport { ForgotComponent } from './forgot/forgot.component';\r\nimport { LockscreenComponent } from './lockscreen/lockscreen.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nexport const AuthenticationRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    children: [\r\n      {\r\n        path: '404',\r\n        component: ErrorComponent\r\n      },\r\n      {\r\n        path: 'forgot',\r\n        component: ForgotComponent\r\n      },\r\n      {\r\n        path: 'lockscreen',\r\n        component: LockscreenComponent\r\n      },\r\n      {\r\n        path: 'login',\r\n        component: LoginComponent\r\n      },\r\n      {\r\n        path: 'register',\r\n        component: RegisterComponent\r\n      }\r\n    ]\r\n  }\r\n];\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-error',\r\n  templateUrl: './error.component.html',\r\n  styleUrls: ['./error.component.scss']\r\n})\r\nexport class ErrorComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","<div class=\"login-register\">\r\n    <div class=\"login-register-box error-card text-center\">\r\n        <h1>404</h1>\r\n        <h3 class=\"text-uppercase\">Page Not Found !</h3>\r\n        <p class=\"text-muted m-t-30 m-b-30\">You seem to be trying to find this way to home</p>\r\n        <a mat-raised-button color=\"primary\" [routerLink]=\"['/']\" class=\"btn btn-info btn-rounded waves-effect waves-light m-b-40\">Back to home</a>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n  FormControl\r\n} from '@angular/forms';\r\nimport { CustomValidators  } from 'ngx-custom-validators';\r\n\r\n\r\n@Component({\r\n  selector: 'app-forgot',\r\n  templateUrl: './forgot.component.html',\r\n  styleUrls: ['./forgot.component.scss']\r\n})\r\nexport class ForgotComponent implements OnInit {\r\n  public form: FormGroup;\r\n  constructor(private fb: FormBuilder, private router: Router) {}\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.group({\r\n      email: [\r\n        null,\r\n        Validators.compose([Validators.required, CustomValidators.email])\r\n      ]\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.router.navigate(['/authentication/login']);\r\n  }\r\n}\r\n","<div class=\"login-register\">\r\n  <div class=\"login-register-box\">\r\n    <mat-card>\r\n      <mat-card-content>\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n          <div class=\"text-center\">\r\n            <img alt=\"homepage\" src=\"assets/images/logo-icon.png\">\r\n            <h4 class=\"m-t-0\">Recover Password</h4>\r\n          </div>\r\n          <p class=\"text-center font-14\">Enter your email and we'll send you the password reset link.</p>\r\n\r\n          <div fxLayout=\"column\" fxLayoutAlign=\"space-around\">\r\n            <div class=\"pb-1\">\r\n              <mat-form-field style=\"width: 100%\">\r\n                <input matInput placeholder=\"Email address\" type=\"email\" [formControl]=\"form.controls['email']\">\r\n              </mat-form-field>\r\n              <small *ngIf=\"form.controls['email'].hasError('required') && form.controls['email'].touched\" class=\"text-danger support-text\">You must include an email address.</small>\r\n              <small *ngIf=\"form.controls['email'].errors?.email && form.controls['email'].touched\" class=\"text-danger support-text\">You must include a valid email address.</small>\r\n            </div>\r\n            <button mat-raised-button color=\"primary\" type=\"submit\" class=\"btn-block btn-lg m-t-20\" [disabled]=\"!form.valid\">Submit</button>\r\n          </div>\r\n\r\n        </form>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n  FormControl\r\n} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-lockscreen',\r\n  templateUrl: './lockscreen.component.html',\r\n  styleUrls: ['./lockscreen.component.scss']\r\n})\r\nexport class LockscreenComponent implements OnInit {\r\n  public form: FormGroup;\r\n  constructor(private fb: FormBuilder, private router: Router) {}\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.group({\r\n      uname: [null, Validators.compose([Validators.required])]\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.router.navigate(['/']);\r\n  }\r\n}\r\n","<div class=\"login-register\">\r\n  <div class=\"login-register-box\">\r\n    <mat-card>\r\n      <mat-card-content>\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n          <div class=\"text-center\">\r\n            <img src=\"assets/images/users/1.jpg\" class=\"img-circle\" width=\"80\" alt=\"user\" title=\"user\" />\r\n            <h4 class=\"m-t-0\">David Miller</h4>\r\n          </div>\r\n\r\n          <div fxLayout=\"row wrap\">\r\n            <!-- col full-->\r\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n              <mat-form-field style=\"width: 100%\">\r\n                <input matInput placeholder=\"Username\" [formControl]=\"form.controls['uname']\">\r\n              </mat-form-field>\r\n              <small *ngIf=\"form.controls['uname'].hasError('required') && form.controls['uname'].touched\" class=\"text-danger support-text\">Username is required.</small>\r\n            </div>\r\n            <!-- col full-->\r\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n              <button mat-raised-button class=\"btn-block btn-lg m-t-10 m-b-10\" color=\"primary\" type=\"submit\" [disabled]=\"!form.valid\">Unlock</button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n  FormControl\r\n} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  public form: FormGroup;\r\n  constructor(private fb: FormBuilder, private router: Router) {}\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.group({\r\n      uname: [null, Validators.compose([Validators.required])],\r\n      password: [null, Validators.compose([Validators.required])]\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.router.navigate(['/dashboards/dashboard1']);\r\n  }\r\n}\r\n","<div class=\"login-register\">\r\n    <div class=\"login-register-box\">\r\n        <mat-card>\r\n            <mat-card-content>\r\n                <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n                    <div class=\"text-center\">\r\n                        <img alt=\"homepage\" src=\"assets/images/logo-icon.png\">\r\n                        <h4 class=\"m-t-0\">Login to App</h4>\r\n                    </div>\r\n\r\n                    <div fxLayout=\"row wrap\">\r\n                        <!-- col full-->\r\n                        <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n                            <mat-form-field>\r\n                                <input matInput placeholder=\"Username\" [formControl]=\"form.controls['uname']\">\r\n                            </mat-form-field>\r\n                            <small *ngIf=\"form.controls['uname'].hasError('required') && form.controls['uname'].touched\" class=\"text-danger support-text\">Username is required.</small>\r\n                        </div>\r\n                        <!-- col full-->\r\n                        <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n                            <mat-form-field>\r\n                                <input matInput type=\"password\" placeholder=\"Password\" [formControl]=\"form.controls['password']\">\r\n                            </mat-form-field>\r\n                            <small *ngIf=\"form.controls['password'].hasError('required') && form.controls['password'].touched\" class=\"text-danger support-text\">Password is required.</small>\r\n                        </div>\r\n                        <!-- col half-->\r\n                        <div fxFlex.gt-sm=\"50\" fxFlex.gt-xs=\"50\">\r\n                            <mat-checkbox color=\"warn\">Remember me</mat-checkbox>\r\n                        </div>\r\n                        <!-- col half-->\r\n                        <div fxFlex.gt-sm=\"50\" fxFlex.gt-xs=\"50\" class=\"text-right\">\r\n                            <a [routerLink]=\"['/authentication/forgot']\" class=\"link\">Forgot pwd?</a>\r\n                        </div>\r\n                        <!-- col full-->\r\n                        <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n                            <button mat-raised-button color=\"primary\" class=\"btn-block btn-lg m-t-20 m-b-20\" type=\"submit\" [disabled]=\"!form.valid\">Login</button>\r\n                        </div>\r\n                        <!-- col full-->\r\n                        <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\" class=\"text-center\">\r\n                            <span>Don't have an account?\r\n                                <a [routerLink]=\"['/authentication/register']\" class=\"text-info link\">Register</a>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </mat-card-content>\r\n        </mat-card>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n  FormControl\r\n} from '@angular/forms';\r\nimport { CustomValidators  } from 'ngx-custom-validators';\r\n\r\n\r\nconst password = new FormControl('', Validators.required);\r\nconst confirmPassword = new FormControl('', CustomValidators.equalTo(password));\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  public form: FormGroup;\r\n  constructor(private fb: FormBuilder, private router: Router) {}\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.group({\r\n      email: [\r\n        null,\r\n        Validators.compose([Validators.required, CustomValidators.email])\r\n      ],\r\n      password: password,\r\n      confirmPassword: confirmPassword\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.router.navigate(['/']);\r\n  }\r\n}\r\n","<div class=\"login-register\" >\r\n  <div class=\"login-register-box\">\r\n    <mat-card>\r\n      <mat-card-content>\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n          <div class=\"text-center\">\r\n            <img alt=\"homepage\" src=\"assets/images/logo-icon.png\">\r\n            <h4 class=\"m-t-0\">Register to App</h4>\r\n          </div>\r\n          <div fxLayout=\"row wrap\">\r\n            <!-- col full-->\r\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n              <mat-form-field style=\"width: 100%\">\r\n                <input matInput placeholder=\"Email address\" type=\"email\" [formControl]=\"form.controls['email']\">\r\n              </mat-form-field>\r\n              <small *ngIf=\"form.controls['email'].hasError('required') && form.controls['email'].touched\" class=\"text-danger support-text\">You must include an email address.</small>\r\n              <small *ngIf=\"form.controls['email'].errors?.email && form.controls['email'].touched\" class=\"text-danger support-text\">You must include a valid email address.</small>\r\n            </div>\r\n            <!-- col full-->\r\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n              <mat-form-field style=\"width: 100%\">\r\n                <input matInput type=\"password\" placeholder=\"Password\" [formControl]=\"form.controls['password']\">\r\n              </mat-form-field>\r\n              <small *ngIf=\"form.controls['password'].hasError('required') && form.controls['password'].touched\" class=\"text-danger support-text\">You must include password.</small>\r\n            </div>\r\n            <!-- col full-->\r\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n              <mat-form-field style=\"width: 100%\">\r\n                <input matInput placeholder=\"Confirm Password\" [formControl]=\"form.controls['confirmPassword']\" type=\"password\">\r\n              </mat-form-field>\r\n              <small *ngIf=\"form.controls['confirmPassword'].hasError('required') && form.controls['confirmPassword'].touched\" class=\"text-danger support-text\">You must include confirm password.</small>\r\n              <small *ngIf=\"form.controls['confirmPassword'].errors?.equalTo\" class=\"text-danger support-text\">Passwords do not math.</small>\r\n            </div>\r\n            <!-- col full-->\r\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n              <mat-checkbox class=\"font-14\">I agree to the all\r\n                <a href=\"javascript:void(0)\" class=\"link text-info\">terms</a>.</mat-checkbox>\r\n            </div>\r\n            <button mat-raised-button color=\"primary\" class=\"btn-block btn-lg m-t-20 m-b-20\" type=\"submit\" [disabled]=\"!form.valid\">Create your account</button>\r\n\r\n            <div class=\"text-center\" fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n              <span>Already have an account?\r\n                <a [routerLink]=\"['/authentication/login']\" class=\"link text-info\"> Login</a>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>"],"sourceRoot":"webpack:///"}