{"version":3,"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/tree.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/tree.js","webpack:///src/app/tree/check-tree/check-tree.component.ts","webpack:///src/app/tree/check-tree/check-tree.component.html","webpack:///src/app/tree/dynamic-tree/dynamic-tree.component.ts","webpack:///src/app/tree/dynamic-tree/dynamic-tree.component.html","webpack:///src/app/tree/flat-tree/flat-tree.component.ts","webpack:///src/app/tree/flat-tree/flat-tree.component.html","webpack:///src/app/tree/load-tree/load-tree.component.ts","webpack:///src/app/tree/load-tree/load-tree.component.html","webpack:///src/app/tree/nested-tree/nested-tree.component.ts","webpack:///src/app/tree/nested-tree/nested-tree.component.html","webpack:///src/app/tree/tree.module.ts","webpack:///src/app/tree/tree.routing.ts"],"names":["BaseTreeControl","expansionModel","dataNode","toggle","select","deselect","isSelected","collapseDescendants","expandDescendants","clear","toBeProcessed","push","getDescendants","FlatTreeControl","getLevel","isExpandable","startIndex","dataNodes","indexOf","results","i","length","NestedTreeControl","getChildren","allNodes","reduce","accumulator","descendants","_getDescendants","splice","childrenNodes","Array","isArray","forEach","child","pipe","Boolean","subscribe","children","TreeControl","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodeOutlet","viewContainer","_node","ɵfac","CdkTreeNodeOutlet_Factory","t","ɵdir","type","selectors","ctorParameters","undefined","decorators","args","selector","CdkTreeNodeOutletContext","data","$implicit","CdkTreeNodeDef","template","CdkTreeNodeDef_Factory","inputs","when","getTreeNoValidDataSourceError","Error","getTreeMultipleDefaultNodeDefsError","getTreeMissingMatchingNodeDefError","getTreeControlMissingError","getTreeControlFunctionsMissingError","CdkTree","_differs","_changeDetectorRef","_onDestroy","_levels","Map","viewChange","start","end","Number","MAX_VALUE","_dataDiffer","find","create","trackBy","treeControl","_nodeOutlet","next","complete","_dataSource","disconnect","dataSource","_dataSubscription","unsubscribe","defaultNodeDefs","_nodeDefs","filter","def","_defaultNodeDef","_observeRenderChanges","dataStream","connect","renderNodeChanges","dataDiffer","parentData","changes","diff","forEachOperation","item","adjustedPreviousIndex","currentIndex","previousIndex","insertNode","remove","delete","view","get","move","detectChanges","first","nodeDef","nodeData","index","node","_getNodeDef","context","level","has","set","container","createEmbeddedView","CdkTreeNode","mostRecentTreeNode","_switchDataSource","CdkTree_Factory","ɵcmp","contentQueries","CdkTree_ContentQueries","rf","ctx","dirIndex","_t","viewQuery","CdkTree_Query","hostAttrs","exportAs","decls","vars","consts","CdkTree_Template","directives","encapsulation","propDecorators","static","host","None","changeDetection","Default","_elementRef","_tree","_destroyed","_dataChanges","role","nativeElement","focus","_data","_setRoleFromChildren","value","_setRoleFromData","isExpanded","CdkTreeNode_Factory","hostVars","hostBindings","CdkTreeNode_HostBindings","CdkNestedTreeNode","updateChildrenNodes","result","nodeOutlet","_clear","outlet","_getNodeOutlet","_children","outlets","CdkNestedTreeNode_Factory","CdkNestedTreeNode_ContentQueries","CdkNestedTreeNode_HostBindings","features","provide","useExisting","providers","cssUnitPattern","CdkTreeNodePadding","_treeNode","_renderer","_element","_dir","indentUnits","_indent","_setPadding","change","nodeLevel","_level","forceChange","padding","_paddingIndent","_currentPadding","element","paddingProp","resetProp","setStyle","indent","units","parts","split","CdkTreeNodePadding_Factory","CdkTreeNodeToggle","_recursive","event","recursive","toggleDescendants","stopPropagation","CdkTreeNodeToggle_Factory","CdkTreeNodeToggle_HostBindings","CdkTreeNodeToggle_click_HostBindingHandler","$event","_toggle","EXPORTED_DECLARATIONS","CdkTreeModule","ɵmod","ɵinj","factory","CdkTreeModule_Factory","ngJitMode","declarations","exports","_MatTreeNodeMixinBase","MatTreeNode","tabIndex","MatTreeNode_Factory","MatTreeNode_HostBindings","disabled","String","MatTreeNodeDef","MatTreeNodeDef_Factory","ɵMatTreeNodeDef_BaseFactory","MatNestedTreeNode","_disabled","_tabIndex","MatNestedTreeNode_Factory","MatNestedTreeNode_HostBindings","MatTreeNodePadding","MatTreeNodePadding_Factory","ɵMatTreeNodePadding_BaseFactory","MatTreeNodeOutlet","MatTreeNodeOutlet_Factory","MatTree","MatTree_Factory","ɵMatTree_BaseFactory","MatTree_Query","MatTree_Template","styles","MatTreeNodeToggle","arguments","MatTreeNodeToggle_Factory","ɵMatTreeNodeToggle_BaseFactory","MAT_TREE_DIRECTIVES","MatTreeModule","MatTreeModule_Factory","imports","MatTreeFlattener","transformFunction","resultNodes","parentMap","flatNode","_flattenChildren","childParentMap","slice","_flattenNode","structuredData","nodes","currentExpand","expand","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","_expandedData","collectionViewer","changed","expandFlattenedNodes","flattenNodes","MatTreeNestedDataSource","TodoItemNode","TodoItemFlatNode","TREE_DATA","Groceries","Fruits","Apple","Berries","Orange","Reminders","ChecklistDatabase","dataChange","initialize","buildFileTree","obj","Object","keys","key","concat","parent","name","ChecktreeComponent","_database","flatNodeMap","nestedNodeMap","selectedParent","newItemName","checklistSelection","expandable","hasChild","_","_nodeData","hasNoContent","transformer","existingNode","treeFlattener","descAllSelected","every","some","descendantsAllSelected","checkAllParentsSelection","getParentNode","checkRootNodeSelection","nodeSelected","currentLevel","currentNode","parentNode","insertItem","itemValue","nestedNode","updateItem","templateUrl","styleUrls","DynamicFlatNode","isLoading","DynamicDatabase","dataMap","rootLevelNodes","map","providedIn","DynamicDataSource","added","removed","handleTreeControl","toggleNode","reverse","setTimeout","count","DynamictreeComponent","database","FlattreeComponent","_transformer","LOAD_MORE","LoadmoreNode","hasChildren","loadMoreParentItem","childrenChange","LoadmoreFlatNode","LoadmoreDatabase","batchNumber","nodeMap","_generateNode","onlyFirstTime","newChildrenNumber","LoadtreeComponent","newNode","isLoadMore","loadMore","NestedtreeComponent","TreeModule","forChild","TreeRoutes","path","component","title","urls","url"],"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","file":"tree-tree-module-es5.js","sourcesContent":["import { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport { InjectionToken, Directive, ViewContainerRef, Inject, Optional, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, IterableDiffers, ChangeDetectorRef, Input, ViewChild, ContentChildren, ElementRef, Renderer2, HostListener, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor } from '@angular/cdk/a11y';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/control/base-tree-control.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Base tree control. It has basic toggle/expand/collapse operations on a single data node.\n * @abstract\n * @template T\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nclass BaseTreeControl {\n    constructor() {\n        /**\n         * A selection model with multi-selection to track expansion status.\n         */\n        this.expansionModel = new SelectionModel(true);\n    }\n    /**\n     * Toggles one single data node's expanded/collapsed state.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    toggle(dataNode) {\n        this.expansionModel.toggle(dataNode);\n    }\n    /**\n     * Expands one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    expand(dataNode) {\n        this.expansionModel.select(dataNode);\n    }\n    /**\n     * Collapses one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    collapse(dataNode) {\n        this.expansionModel.deselect(dataNode);\n    }\n    /**\n     * Whether a given data node is expanded or not. Returns true if the data node is expanded.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    isExpanded(dataNode) {\n        return this.expansionModel.isSelected(dataNode);\n    }\n    /**\n     * Toggles a subtree rooted at `node` recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    toggleDescendants(dataNode) {\n        this.expansionModel.isSelected(dataNode)\n            ? this.collapseDescendants(dataNode)\n            : this.expandDescendants(dataNode);\n    }\n    /**\n     * Collapse all dataNodes in the tree.\n     * @return {?}\n     */\n    collapseAll() {\n        this.expansionModel.clear();\n    }\n    /**\n     * Expands a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    expandDescendants(dataNode) {\n        /** @type {?} */\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed);\n    }\n    /**\n     * Collapses a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    collapseDescendants(dataNode) {\n        /** @type {?} */\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed);\n    }\n}\nif (false) {\n    /**\n     * Saved data node for `expandAll` action.\n     * @type {?}\n     */\n    BaseTreeControl.prototype.dataNodes;\n    /**\n     * A selection model with multi-selection to track expansion status.\n     * @type {?}\n     */\n    BaseTreeControl.prototype.expansionModel;\n    /**\n     * Get depth of a given data node, return the level number. This is for flat tree node.\n     * @type {?}\n     */\n    BaseTreeControl.prototype.getLevel;\n    /**\n     * Whether the data node is expandable. Returns true if expandable.\n     * This is for flat tree node.\n     * @type {?}\n     */\n    BaseTreeControl.prototype.isExpandable;\n    /**\n     * Gets a stream that emits whenever the given data node's children change.\n     * @type {?}\n     */\n    BaseTreeControl.prototype.getChildren;\n    /**\n     * Gets a list of descendent data nodes of a subtree rooted at given data node recursively.\n     * @abstract\n     * @param {?} dataNode\n     * @return {?}\n     */\n    BaseTreeControl.prototype.getDescendants = function (dataNode) { };\n    /**\n     * Expands all data nodes in the tree.\n     * @abstract\n     * @return {?}\n     */\n    BaseTreeControl.prototype.expandAll = function () { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/control/flat-tree-control.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.\n * @template T\n */\nclass FlatTreeControl extends BaseTreeControl {\n    /**\n     * Construct with flat tree data node functions getLevel and isExpandable.\n     * @param {?} getLevel\n     * @param {?} isExpandable\n     */\n    constructor(getLevel, isExpandable) {\n        super();\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n    }\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    getDescendants(dataNode) {\n        /** @type {?} */\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        /** @type {?} */\n        const results = [];\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n            results.push(this.dataNodes[i]);\n        }\n        return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     * @return {?}\n     */\n    expandAll() {\n        this.expansionModel.select(...this.dataNodes);\n    }\n}\nif (false) {\n    /** @type {?} */\n    FlatTreeControl.prototype.getLevel;\n    /** @type {?} */\n    FlatTreeControl.prototype.isExpandable;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/control/nested-tree-control.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.\n * @template T\n */\nclass NestedTreeControl extends BaseTreeControl {\n    /**\n     * Construct with nested tree function getChildren.\n     * @param {?} getChildren\n     */\n    constructor(getChildren) {\n        super();\n        this.getChildren = getChildren;\n    }\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     * @return {?}\n     */\n    expandAll() {\n        this.expansionModel.clear();\n        /** @type {?} */\n        const allNodes = this.dataNodes.reduce((/**\n         * @param {?} accumulator\n         * @param {?} dataNode\n         * @return {?}\n         */\n        (accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode]), []);\n        this.expansionModel.select(...allNodes);\n    }\n    /**\n     * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    getDescendants(dataNode) {\n        /** @type {?} */\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n        // Remove the node itself\n        return descendants.splice(1);\n    }\n    /**\n     * A helper function to get descendants recursively.\n     * @protected\n     * @param {?} descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n    _getDescendants(descendants, dataNode) {\n        descendants.push(dataNode);\n        /** @type {?} */\n        const childrenNodes = this.getChildren(dataNode);\n        if (Array.isArray(childrenNodes)) {\n            childrenNodes.forEach((/**\n             * @param {?} child\n             * @return {?}\n             */\n            (child) => this._getDescendants(descendants, child)));\n        }\n        else if (isObservable(childrenNodes)) {\n            // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n            // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n            childrenNodes.pipe(take(1), filter((/** @type {?} */ (Boolean))))\n                .subscribe((/**\n             * @param {?} children\n             * @return {?}\n             */\n            children => {\n                for (const child of children) {\n                    this._getDescendants(descendants, child);\n                }\n            }));\n        }\n    }\n}\nif (false) {\n    /** @type {?} */\n    NestedTreeControl.prototype.getChildren;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/control/tree-control.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Tree control interface. User can implement TreeControl to expand/collapse dataNodes in the tree.\n * The CDKTree will use this TreeControl to expand/collapse a node.\n * User can also use it outside the `<cdk-tree>` to control the expansion status of the tree.\n * @record\n * @template T\n */\nfunction TreeControl() { }\nif (false) {\n    /**\n     * The saved tree nodes data for `expandAll` action.\n     * @type {?}\n     */\n    TreeControl.prototype.dataNodes;\n    /**\n     * The expansion model\n     * @type {?}\n     */\n    TreeControl.prototype.expansionModel;\n    /**\n     * Get depth of a given data node, return the level number. This is for flat tree node.\n     * @type {?}\n     */\n    TreeControl.prototype.getLevel;\n    /**\n     * Whether the data node is expandable. Returns true if expandable.\n     * This is for flat tree node.\n     * @type {?}\n     */\n    TreeControl.prototype.isExpandable;\n    /**\n     * Gets a stream that emits whenever the given data node's children change.\n     * @type {?}\n     */\n    TreeControl.prototype.getChildren;\n    /**\n     * Whether the data node is expanded or collapsed. Return true if it's expanded.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.isExpanded = function (dataNode) { };\n    /**\n     * Get all descendants of a data node\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.getDescendants = function (dataNode) { };\n    /**\n     * Expand or collapse data node\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.toggle = function (dataNode) { };\n    /**\n     * Expand one data node\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.expand = function (dataNode) { };\n    /**\n     * Collapse one data node\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.collapse = function (dataNode) { };\n    /**\n     * Expand all the dataNodes in the tree\n     * @return {?}\n     */\n    TreeControl.prototype.expandAll = function () { };\n    /**\n     * Collapse all the dataNodes in the tree\n     * @return {?}\n     */\n    TreeControl.prototype.collapseAll = function () { };\n    /**\n     * Toggle a data node by expand/collapse it and all its descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.toggleDescendants = function (dataNode) { };\n    /**\n     * Expand a data node and all its descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.expandDescendants = function (dataNode) { };\n    /**\n     * Collapse a data node and all its descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.collapseDescendants = function (dataNode) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/outlet.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass CdkTreeNodeOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?=} _node\n     */\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nCdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) { return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nCdkTreeNodeOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeOutlet, selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]] });\n/** @nocollapse */\nCdkTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeOutlet]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\nif (false) {\n    /** @type {?} */\n    CdkTreeNodeOutlet.prototype.viewContainer;\n    /** @type {?} */\n    CdkTreeNodeOutlet.prototype._node;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/node.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Context provided to the tree node component.\n * @template T\n */\nclass CdkTreeNodeOutletContext {\n    /**\n     * @param {?} data\n     */\n    constructor(data) {\n        this.$implicit = data;\n    }\n}\nif (false) {\n    /**\n     * Data for the node.\n     * @type {?}\n     */\n    CdkTreeNodeOutletContext.prototype.$implicit;\n    /**\n     * Depth of the node.\n     * @type {?}\n     */\n    CdkTreeNodeOutletContext.prototype.level;\n    /**\n     * Index location of the node.\n     * @type {?}\n     */\n    CdkTreeNodeOutletContext.prototype.index;\n    /**\n     * Length of the number of total dataNodes.\n     * @type {?}\n     */\n    CdkTreeNodeOutletContext.prototype.count;\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n * @template T\n */\nclass CdkTreeNodeDef {\n    /**\n     * \\@docs-private\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) { return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkTreeNodeDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeDef, selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]], inputs: { when: [\"cdkTreeNodeDefWhen\", \"when\"] } });\n/** @nocollapse */\nCdkTreeNodeDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeDef]',\n                inputs: [\n                    'when: cdkTreeNodeDefWhen'\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\nif (false) {\n    /**\n     * Function that should return true if this node template should be used for the provided node\n     * data and index. If left undefined, this node will be considered the default node template to\n     * use when no other when functions return true for the data.\n     * For every node, there must be at least one when function that passes or an undefined to\n     * default.\n     * @type {?}\n     */\n    CdkTreeNodeDef.prototype.when;\n    /** @type {?} */\n    CdkTreeNodeDef.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/tree-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when there is no usable data.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeNoValidDataSourceError() {\n    return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeMissingMatchingNodeDefError() {\n    return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeControlMissingError() {\n    return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeControlFunctionsMissingError() {\n    return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/tree.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n * @template T\n */\nclass CdkTree {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     */\n    constructor(_differs, _changeDetectorRef) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Level of nodes\n         */\n        this._levels = new Map();\n        // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n        //     Remove the MAX_VALUE in viewChange\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     * @return {?}\n     */\n    get dataSource() { return this._dataSource; }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n        if (!this.treeControl) {\n            throw getTreeControlMissingError();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (this._dataSource && typeof ((/** @type {?} */ (this._dataSource))).disconnect === 'function') {\n            ((/** @type {?} */ (this.dataSource))).disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        /** @type {?} */\n        const defaultNodeDefs = this._nodeDefs.filter((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => !def.when));\n        if (defaultNodeDefs.length > 1) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this._defaultNodeDef = defaultNodeDefs[0];\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            this._observeRenderChanges();\n        }\n    }\n    // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n    //     and nested trees.\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     * @private\n     * @param {?} dataSource\n     * @return {?}\n     */\n    _switchDataSource(dataSource) {\n        if (this._dataSource && typeof ((/** @type {?} */ (this._dataSource))).disconnect === 'function') {\n            ((/** @type {?} */ (this.dataSource))).disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) {\n            this._nodeOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n        if (this._nodeDefs) {\n            this._observeRenderChanges();\n        }\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @private\n     * @return {?}\n     */\n    _observeRenderChanges() {\n        /** @type {?} */\n        let dataStream;\n        if (isDataSource(this._dataSource)) {\n            dataStream = this._dataSource.connect(this);\n        }\n        else if (isObservable(this._dataSource)) {\n            dataStream = this._dataSource;\n        }\n        else if (Array.isArray(this._dataSource)) {\n            dataStream = of(this._dataSource);\n        }\n        if (dataStream) {\n            this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n                .subscribe((/**\n             * @param {?} data\n             * @return {?}\n             */\n            data => this.renderNodeChanges(data)));\n        }\n        else {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n    /**\n     * Check for changes made in the data and render each change (node added/removed/moved).\n     * @param {?} data\n     * @param {?=} dataDiffer\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n    renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n        /** @type {?} */\n        const changes = dataDiffer.diff(data);\n        if (!changes) {\n            return;\n        }\n        changes.forEachOperation((/**\n         * @param {?} item\n         * @param {?} adjustedPreviousIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (item, adjustedPreviousIndex, currentIndex) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[(/** @type {?} */ (currentIndex))], (/** @type {?} */ (currentIndex)), viewContainer, parentData);\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove((/** @type {?} */ (adjustedPreviousIndex)));\n                this._levels.delete(item.item);\n            }\n            else {\n                /** @type {?} */\n                const view = viewContainer.get((/** @type {?} */ (adjustedPreviousIndex)));\n                viewContainer.move((/** @type {?} */ (view)), currentIndex);\n            }\n        }));\n        this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     * @param {?} data\n     * @param {?} i\n     * @return {?}\n     */\n    _getNodeDef(data, i) {\n        if (this._nodeDefs.length === 1) {\n            return this._nodeDefs.first;\n        }\n        /** @type {?} */\n        const nodeDef = this._nodeDefs.find((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.when && def.when(i, data))) || this._defaultNodeDef;\n        if (!nodeDef) {\n            throw getTreeMissingMatchingNodeDefError();\n        }\n        return nodeDef;\n    }\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     * @param {?} nodeData\n     * @param {?} index\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n    insertNode(nodeData, index, viewContainer, parentData) {\n        /** @type {?} */\n        const node = this._getNodeDef(nodeData, index);\n        // Node context that will be provided to created embedded view\n        /** @type {?} */\n        const context = new CdkTreeNodeOutletContext(nodeData);\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        }\n        else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = (/** @type {?} */ (this._levels.get(parentData))) + 1;\n        }\n        else {\n            context.level = 0;\n        }\n        this._levels.set(nodeData, context.level);\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        /** @type {?} */\n        const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n}\nCdkTree.ɵfac = function CdkTree_Factory(t) { return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkTree.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkTree, selectors: [[\"cdk-tree\"]], contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n    } }, viewQuery: function CdkTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkTreeNodeOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"], inputs: { dataSource: \"dataSource\", treeControl: \"treeControl\", trackBy: \"trackBy\" }, exportAs: [\"cdkTree\"], decls: 1, vars: 0, consts: [[\"cdkTreeNodeOutlet\", \"\"]], template: function CdkTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkTreeNodeOutlet], encapsulation: 2 });\n/** @nocollapse */\nCdkTree.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef }\n];\nCdkTree.propDecorators = {\n    dataSource: [{ type: Input }],\n    treeControl: [{ type: Input }],\n    trackBy: [{ type: Input }],\n    _nodeOutlet: [{ type: ViewChild, args: [CdkTreeNodeOutlet, { static: true },] }],\n    _nodeDefs: [{ type: ContentChildren, args: [CdkTreeNodeDef, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTree, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-tree',\n                exportAs: 'cdkTree',\n                template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'cdk-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n                // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }]; }, { dataSource: [{\n            type: Input\n        }], treeControl: [{\n            type: Input\n        }], trackBy: [{\n            type: Input\n        }], _nodeOutlet: [{\n            type: ViewChild,\n            args: [CdkTreeNodeOutlet, { static: true }]\n        }], _nodeDefs: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeDef, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\nif (false) {\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._onDestroy;\n    /**\n     * Differ used to find the changes in the data provided by the data source.\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._dataDiffer;\n    /**\n     * Stores the node definition that does not have a when predicate.\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._defaultNodeDef;\n    /**\n     * Data subscription\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._dataSubscription;\n    /**\n     * Level of nodes\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._levels;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._dataSource;\n    /**\n     * The tree controller\n     * @type {?}\n     */\n    CdkTree.prototype.treeControl;\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\n     * relative to the function to know if a node should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     * @type {?}\n     */\n    CdkTree.prototype.trackBy;\n    /** @type {?} */\n    CdkTree.prototype._nodeOutlet;\n    /**\n     * The tree node template for the tree\n     * @type {?}\n     */\n    CdkTree.prototype._nodeDefs;\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     * @type {?}\n     */\n    CdkTree.prototype.viewChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._differs;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._changeDetectorRef;\n}\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n * @template T\n */\nclass CdkTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     */\n    constructor(_elementRef, _tree) {\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Emits when the node's data has changed.\n         */\n        this._dataChanges = new Subject();\n        /**\n         * The role of the node should be 'group' if it's an internal node,\n         * and 'treeitem' if it's a leaf node.\n         */\n        this.role = 'treeitem';\n        CdkTreeNode.mostRecentTreeNode = (/** @type {?} */ (this));\n    }\n    /**\n     * The tree node's data.\n     * @return {?}\n     */\n    get data() { return this._data; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) {\n        if (value !== this._data) {\n            this._data = value;\n            this._setRoleFromData();\n            this._dataChanges.next();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get isExpanded() {\n        return this._tree.treeControl.isExpanded(this._data);\n    }\n    /**\n     * @return {?}\n     */\n    get level() {\n        return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // If this is the last tree node being destroyed,\n        // clear out the reference to avoid leaking memory.\n        if (CdkTreeNode.mostRecentTreeNode === this) {\n            CdkTreeNode.mostRecentTreeNode = null;\n        }\n        this._dataChanges.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Focuses the menu item. Implements for FocusableOption.\n     * @return {?}\n     */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    _setRoleFromData() {\n        if (this._tree.treeControl.isExpandable) {\n            this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n        }\n        else {\n            if (!this._tree.treeControl.getChildren) {\n                throw getTreeControlFunctionsMissingError();\n            }\n            /** @type {?} */\n            const childrenNodes = this._tree.treeControl.getChildren(this._data);\n            if (Array.isArray(childrenNodes)) {\n                this._setRoleFromChildren((/** @type {?} */ (childrenNodes)));\n            }\n            else if (isObservable(childrenNodes)) {\n                childrenNodes.pipe(takeUntil(this._destroyed))\n                    .subscribe((/**\n                 * @param {?} children\n                 * @return {?}\n                 */\n                children => this._setRoleFromChildren(children)));\n            }\n        }\n    }\n    /**\n     * @protected\n     * @param {?} children\n     * @return {?}\n     */\n    _setRoleFromChildren(children) {\n        this.role = children && children.length ? 'group' : 'treeitem';\n    }\n}\nCdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) { return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree)); };\nCdkTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNode, selectors: [[\"cdk-tree-node\"]], hostAttrs: [1, \"cdk-tree-node\"], hostVars: 3, hostBindings: function CdkTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    } }, inputs: { role: \"role\" }, exportAs: [\"cdkTreeNode\"] });\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\nCdkTreeNode.mostRecentTreeNode = null;\n/** @nocollapse */\nCdkTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree }\n];\nCdkTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-tree-node',\n                exportAs: 'cdkTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                    '[attr.role]': 'role',\n                    'class': 'cdk-tree-node'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }]; }, { role: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n     * in `CdkTree` and set the data to it.\n     * @type {?}\n     */\n    CdkTreeNode.mostRecentTreeNode;\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNode.prototype._destroyed;\n    /**\n     * Emits when the node's data has changed.\n     * @type {?}\n     */\n    CdkTreeNode.prototype._dataChanges;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNode.prototype._data;\n    /**\n     * The role of the node should be 'group' if it's an internal node,\n     * and 'treeitem' if it's a leaf node.\n     * @type {?}\n     */\n    CdkTreeNode.prototype.role;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNode.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNode.prototype._tree;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/nested-node.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n * @template T\n */\nclass CdkNestedTreeNode extends CdkTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} _differs\n     */\n    constructor(_elementRef, _tree, _differs) {\n        super(_elementRef, _tree);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this._differs = _differs;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n        if (!this._tree.treeControl.getChildren) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        /** @type {?} */\n        const childrenNodes = this._tree.treeControl.getChildren(this.data);\n        if (Array.isArray(childrenNodes)) {\n            this.updateChildrenNodes((/** @type {?} */ (childrenNodes)));\n        }\n        else if (isObservable(childrenNodes)) {\n            childrenNodes.pipe(takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} result\n             * @return {?}\n             */\n            result => this.updateChildrenNodes(result)));\n        }\n        this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => this.updateChildrenNodes()));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._clear();\n        super.ngOnDestroy();\n    }\n    /**\n     * Add children dataNodes to the NodeOutlet\n     * @protected\n     * @param {?=} children\n     * @return {?}\n     */\n    updateChildrenNodes(children) {\n        /** @type {?} */\n        const outlet = this._getNodeOutlet();\n        if (children) {\n            this._children = children;\n        }\n        if (outlet && this._children) {\n            /** @type {?} */\n            const viewContainer = outlet.viewContainer;\n            this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        }\n        else {\n            // Reset the data differ if there's no children nodes displayed\n            this._dataDiffer.diff([]);\n        }\n    }\n    /**\n     * Clear the children dataNodes.\n     * @protected\n     * @return {?}\n     */\n    _clear() {\n        /** @type {?} */\n        const outlet = this._getNodeOutlet();\n        if (outlet) {\n            outlet.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    }\n    /**\n     * Gets the outlet for the current node.\n     * @private\n     * @return {?}\n     */\n    _getNodeOutlet() {\n        /** @type {?} */\n        const outlets = this.nodeOutlet;\n        // Note that since we use `descendants: true` on the query, we have to ensure\n        // that we don't pick up the outlet of a child node by accident.\n        return outlets && outlets.find((/**\n         * @param {?} outlet\n         * @return {?}\n         */\n        outlet => !outlet._node || outlet._node === this));\n    }\n}\nCdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) { return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkNestedTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkNestedTreeNode, selectors: [[\"cdk-nested-tree-node\"]], contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    } }, hostAttrs: [1, \"cdk-tree-node\", \"cdk-nested-tree-node\"], hostVars: 2, hostBindings: function CdkNestedTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    } }, exportAs: [\"cdkNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers }\n];\nCdkNestedTreeNode.propDecorators = {\n    nodeOutlet: [{ type: ContentChildren, args: [CdkTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-nested-tree-node',\n                exportAs: 'cdkNestedTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.role]': 'role',\n                    'class': 'cdk-tree-node cdk-nested-tree-node'\n                },\n                providers: [\n                    { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }, { type: ɵngcc0.IterableDiffers }]; }, { nodeOutlet: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\nif (false) {\n    /**\n     * Differ used to find the changes in the data provided by the data source.\n     * @type {?}\n     * @private\n     */\n    CdkNestedTreeNode.prototype._dataDiffer;\n    /**\n     * The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`.\n     * @type {?}\n     * @protected\n     */\n    CdkNestedTreeNode.prototype._children;\n    /**\n     * The children node placeholder.\n     * @type {?}\n     */\n    CdkNestedTreeNode.prototype.nodeOutlet;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkNestedTreeNode.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkNestedTreeNode.prototype._tree;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkNestedTreeNode.prototype._differs;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/padding.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Regex used to split a string on its CSS units.\n * @type {?}\n */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n * @template T\n */\nclass CdkTreeNodePadding {\n    /**\n     * @param {?} _treeNode\n     * @param {?} _tree\n     * @param {?} _renderer\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    constructor(_treeNode, _tree, _renderer, _element, _dir) {\n        this._treeNode = _treeNode;\n        this._tree = _tree;\n        this._renderer = _renderer;\n        this._element = _element;\n        this._dir = _dir;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * CSS units used for the indentation value.\n         */\n        this.indentUnits = 'px';\n        this._indent = 40;\n        this._setPadding();\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe((/**\n             * @return {?}\n             */\n            () => this._setPadding(true)));\n        }\n        // In Ivy the indentation binding might be set before the tree node's data has been added,\n        // which means that we'll miss the first render. We have to subscribe to changes in the\n        // data to ensure that everything is up to date.\n        _treeNode._dataChanges.subscribe((/**\n         * @return {?}\n         */\n        () => this._setPadding()));\n    }\n    /**\n     * The level of depth of the tree node. The padding will be `level * indent` pixels.\n     * @return {?}\n     */\n    get level() { return this._level; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set level(value) {\n        // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n        // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n        // they set 0 explicitly.\n        this._level = (/** @type {?} */ (coerceNumberProperty(value, null)));\n        this._setPadding();\n    }\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 40px from material design menu sub-menu spec.\n     * @return {?}\n     */\n    get indent() { return this._indent; }\n    /**\n     * @param {?} indent\n     * @return {?}\n     */\n    set indent(indent) {\n        /** @type {?} */\n        let value = indent;\n        /** @type {?} */\n        let units = 'px';\n        if (typeof indent === 'string') {\n            /** @type {?} */\n            const parts = indent.split(cssUnitPattern);\n            value = parts[0];\n            units = parts[1] || units;\n        }\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n        this._setPadding();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * The padding indent value for the tree node. Returns a string with px numbers if not null.\n     * @return {?}\n     */\n    _paddingIndent() {\n        /** @type {?} */\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n        /** @type {?} */\n        const level = this._level == null ? nodeLevel : this._level;\n        return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n    }\n    /**\n     * @param {?=} forceChange\n     * @return {?}\n     */\n    _setPadding(forceChange = false) {\n        /** @type {?} */\n        const padding = this._paddingIndent();\n        if (padding !== this._currentPadding || forceChange) {\n            /** @type {?} */\n            const element = this._element.nativeElement;\n            /** @type {?} */\n            const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n            /** @type {?} */\n            const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n            this._renderer.setStyle(element, paddingProp, padding);\n            this._renderer.setStyle(element, resetProp, null);\n            this._currentPadding = padding;\n        }\n    }\n}\nCdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) { return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nCdkTreeNodePadding.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodePadding, selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]], inputs: { level: [\"cdkTreeNodePadding\", \"level\"], indent: [\"cdkTreeNodePaddingIndent\", \"indent\"] } });\n/** @nocollapse */\nCdkTreeNodePadding.ctorParameters = () => [\n    { type: CdkTreeNode },\n    { type: CdkTree },\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['cdkTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['cdkTreeNodePaddingIndent',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodePadding]'\n            }]\n    }], function () { return [{ type: CdkTreeNode }, { type: CdkTree }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { level: [{\n            type: Input,\n            args: ['cdkTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['cdkTreeNodePaddingIndent']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkTreeNodePadding.ngAcceptInputType_level;\n    /**\n     * Current padding value applied to the element. Used to avoid unnecessarily hitting the DOM.\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._currentPadding;\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._destroyed;\n    /**\n     * CSS units used for the indentation value.\n     * @type {?}\n     */\n    CdkTreeNodePadding.prototype.indentUnits;\n    /** @type {?} */\n    CdkTreeNodePadding.prototype._level;\n    /** @type {?} */\n    CdkTreeNodePadding.prototype._indent;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._treeNode;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._tree;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._dir;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/toggle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Node toggle to expand/collapse the node.\n * @template T\n */\nclass CdkTreeNodeToggle {\n    /**\n     * @param {?} _tree\n     * @param {?} _treeNode\n     */\n    constructor(_tree, _treeNode) {\n        this._tree = _tree;\n        this._treeNode = _treeNode;\n        this._recursive = false;\n    }\n    /**\n     * Whether expand/collapse the node recursively.\n     * @return {?}\n     */\n    get recursive() { return this._recursive; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set recursive(value) { this._recursive = coerceBooleanProperty(value); }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _toggle(event) {\n        this.recursive\n            ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n            : this._tree.treeControl.toggle(this._treeNode.data);\n        event.stopPropagation();\n    }\n}\nCdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) { return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode)); };\nCdkTreeNodeToggle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeToggle, selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]], hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) { return ctx._toggle($event); });\n    } }, inputs: { recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"] } });\n/** @nocollapse */\nCdkTreeNodeToggle.ctorParameters = () => [\n    { type: CdkTree },\n    { type: CdkTreeNode }\n];\nCdkTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['cdkTreeNodeToggleRecursive',] }],\n    _toggle: [{ type: HostListener, args: ['click', ['$event'],] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n        type: Directive,\n        args: [{ selector: '[cdkTreeNodeToggle]' }]\n    }], function () { return [{ type: CdkTree }, { type: CdkTreeNode }]; }, { recursive: [{\n            type: Input,\n            args: ['cdkTreeNodeToggleRecursive']\n        }], _toggle: [{\n            type: HostListener,\n            args: ['click', ['$event']]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkTreeNodeToggle.ngAcceptInputType_recursive;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNodeToggle.prototype._recursive;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNodeToggle.prototype._tree;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNodeToggle.prototype._treeNode;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/tree-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet,\n];\nclass CdkTreeModule {\n}\nCdkTreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkTreeModule });\nCdkTreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CdkTreeModule_Factory(t) { return new (t || CdkTreeModule)(); }, providers: [FocusMonitor, CdkTreeNodeDef] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, { declarations: [CdkNestedTreeNode,\n        CdkTreeNodeDef,\n        CdkTreeNodePadding,\n        CdkTreeNodeToggle,\n        CdkTree,\n        CdkTreeNode,\n        CdkTreeNodeOutlet], exports: [CdkNestedTreeNode,\n        CdkTreeNodeDef,\n        CdkTreeNodePadding,\n        CdkTreeNodeToggle,\n        CdkTree,\n        CdkTreeNode,\n        CdkTreeNodeOutlet] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeModule, [{\n        type: NgModule,\n        args: [{\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS,\n                providers: [FocusMonitor, CdkTreeNodeDef]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };\n\n//# sourceMappingURL=tree.js.map","import { CdkTreeNode, CdkTree, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, ElementRef, Attribute, Input, IterableDiffers, ViewContainerRef, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/node.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\nconst _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n * @template T\n */\nclass MatTreeNode extends _MatTreeNodeMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} tabIndex\n     */\n    constructor(_elementRef, _tree, tabIndex) {\n        super(_elementRef, _tree);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this.role = 'treeitem';\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n}\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) { return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNode, selectors: [[\"mat-tree-node\"]], hostAttrs: [1, \"mat-tree-node\"], hostVars: 3, hostBindings: function MatTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    } }, inputs: { disabled: \"disabled\", tabIndex: \"tabIndex\", role: \"role\" }, exportAs: [\"matTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNode, useExisting: MatTreeNode }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-tree-node',\n                exportAs: 'matTreeNode',\n                inputs: ['disabled', 'tabIndex'],\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                    '[attr.role]': 'role',\n                    'class': 'mat-tree-node'\n                },\n                providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { role: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatTreeNode.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatTreeNode.prototype.role;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatTreeNode.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatTreeNode.prototype._tree;\n}\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * @template T\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n}\nMatTreeNodeDef.ɵfac = function MatTreeNodeDef_Factory(t) { return ɵMatTreeNodeDef_BaseFactory(t || MatTreeNodeDef); };\nMatTreeNodeDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeDef, selectors: [[\"\", \"matTreeNodeDef\", \"\"]], inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeDef.propDecorators = {\n    data: [{ type: Input, args: ['matTreeNode',] }]\n};\nconst ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeDef]',\n                inputs: [\n                    'when: matTreeNodeDefWhen'\n                ],\n                providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\n            }]\n    }], null, { data: [{\n            type: Input,\n            args: ['matTreeNode']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatTreeNodeDef.prototype.data;\n}\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n * @template T\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} _differs\n     * @param {?} tabIndex\n     */\n    constructor(_elementRef, _tree, _differs, tabIndex) {\n        super(_elementRef, _tree, _differs);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this._differs = _differs;\n        this._disabled = false;\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    /**\n     * Whether the node is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * Tabindex for the node.\n     * @return {?}\n     */\n    get tabIndex() { return this.disabled ? -1 : this._tabIndex; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tabIndex(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) { return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatNestedTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatNestedTreeNode, selectors: [[\"mat-nested-tree-node\"]], hostAttrs: [1, \"mat-nested-tree-node\"], hostVars: 2, hostBindings: function MatNestedTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    } }, inputs: { tabIndex: \"tabIndex\", disabled: \"disabled\", node: [\"matNestedTreeNode\", \"node\"] }, exportAs: [\"matNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatNestedTreeNode.propDecorators = {\n    node: [{ type: Input, args: ['matNestedTreeNode',] }],\n    disabled: [{ type: Input }],\n    tabIndex: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-nested-tree-node',\n                exportAs: 'matNestedTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.role]': 'role',\n                    'class': 'mat-nested-tree-node'\n                },\n                providers: [\n                    { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: ɵngcc0.IterableDiffers }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { tabIndex: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], node: [{\n            type: Input,\n            args: ['matNestedTreeNode']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatNestedTreeNode.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatNestedTreeNode.prototype.node;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatNestedTreeNode.prototype._disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatNestedTreeNode.prototype._tabIndex;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatNestedTreeNode.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatNestedTreeNode.prototype._tree;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatNestedTreeNode.prototype._differs;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/padding.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n * @template T\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n}\nMatTreeNodePadding.ɵfac = function MatTreeNodePadding_Factory(t) { return ɵMatTreeNodePadding_BaseFactory(t || MatTreeNodePadding); };\nMatTreeNodePadding.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodePadding, selectors: [[\"\", \"matTreeNodePadding\", \"\"]], inputs: { level: [\"matTreeNodePadding\", \"level\"], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['matTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['matTreeNodePaddingIndent',] }]\n};\nconst ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodePadding]',\n                providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\n            }]\n    }], null, { level: [{\n            type: Input,\n            args: ['matTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['matTreeNodePaddingIndent']\n        }] }); })();\nif (false) {\n    /**\n     * The level of depth of the tree node. The padding will be `level * indent` pixels.\n     * @type {?}\n     */\n    MatTreeNodePadding.prototype.level;\n    /**\n     * The indent for each level. Default number 40px from material design menu sub-menu spec.\n     * @type {?}\n     */\n    MatTreeNodePadding.prototype.indent;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/outlet.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?=} _node\n     */\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) { return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nMatTreeNodeOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeOutlet, selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkTreeNodeOutlet,\n                useExisting: MatTreeNodeOutlet\n            }])] });\n/** @nocollapse */\nMatTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeOutlet]',\n                providers: [{\n                        provide: CdkTreeNodeOutlet,\n                        useExisting: MatTreeNodeOutlet\n                    }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\nif (false) {\n    /** @type {?} */\n    MatTreeNodeOutlet.prototype.viewContainer;\n    /** @type {?} */\n    MatTreeNodeOutlet.prototype._node;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/tree.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nclass MatTree extends CdkTree {\n}\nMatTree.ɵfac = function MatTree_Factory(t) { return ɵMatTree_BaseFactory(t || MatTree); };\nMatTree.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatTree, selectors: [[\"mat-tree\"]], viewQuery: function MatTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(MatTreeNodeOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"], exportAs: [\"matTree\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTree, useExisting: MatTree }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"matTreeNodeOutlet\", \"\"]], template: function MatTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [MatTreeNodeOutlet], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"], encapsulation: 2 });\nMatTree.propDecorators = {\n    _nodeOutlet: [{ type: ViewChild, args: [MatTreeNodeOutlet, { static: true },] }]\n};\nconst ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTree, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tree',\n                exportAs: 'matTree',\n                template: `<ng-container matTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'mat-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // See note on CdkTree for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [{ provide: CdkTree, useExisting: MatTree }],\n                styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"]\n            }]\n    }], null, { _nodeOutlet: [{\n            type: ViewChild,\n            args: [MatTreeNodeOutlet, { static: true }]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatTree.prototype._nodeOutlet;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/toggle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n * @template T\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n    constructor() {\n        super(...arguments);\n        this.recursive = false;\n    }\n}\nMatTreeNodeToggle.ɵfac = function MatTreeNodeToggle_Factory(t) { return ɵMatTreeNodeToggle_BaseFactory(t || MatTreeNodeToggle); };\nMatTreeNodeToggle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeToggle, selectors: [[\"\", \"matTreeNodeToggle\", \"\"]], inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['matTreeNodeToggleRecursive',] }]\n};\nconst ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeToggle]',\n                providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\n            }]\n    }], null, { recursive: [{\n            type: Input,\n            args: ['matTreeNodeToggleRecursive']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatTreeNodeToggle.prototype.recursive;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/tree-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet\n];\nclass MatTreeModule {\n}\nMatTreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatTreeModule });\nMatTreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatTreeModule_Factory(t) { return new (t || MatTreeModule)(); }, imports: [[CdkTreeModule, MatCommonModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, { declarations: function () { return [MatNestedTreeNode,\n        MatTreeNodeDef,\n        MatTreeNodePadding,\n        MatTreeNodeToggle,\n        MatTree,\n        MatTreeNode,\n        MatTreeNodeOutlet]; }, imports: function () { return [CdkTreeModule, MatCommonModule]; }, exports: function () { return [MatNestedTreeNode,\n        MatTreeNodeDef,\n        MatTreeNodePadding,\n        MatTreeNodeToggle,\n        MatTree,\n        MatTreeNode,\n        MatTreeNodeOutlet]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CdkTreeModule, MatCommonModule],\n                exports: MAT_TREE_DIRECTIVES,\n                declarations: MAT_TREE_DIRECTIVES\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/data-source/flat-data-source.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n * @template T, F\n */\nclass MatTreeFlattener {\n    /**\n     * @param {?} transformFunction\n     * @param {?} getLevel\n     * @param {?} isExpandable\n     * @param {?} getChildren\n     */\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    /**\n     * @param {?} node\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n    _flattenNode(node, level, resultNodes, parentMap) {\n        /** @type {?} */\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            /** @type {?} */\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe((/**\n                     * @param {?} children\n                     * @return {?}\n                     */\n                    children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    }));\n                }\n            }\n        }\n        return resultNodes;\n    }\n    /**\n     * @param {?} children\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((/**\n         * @param {?} child\n         * @param {?} index\n         * @return {?}\n         */\n        (child, index) => {\n            /** @type {?} */\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        }));\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     * @param {?} structuredData\n     * @return {?}\n     */\n    flattenNodes(structuredData) {\n        /** @type {?} */\n        let resultNodes = [];\n        structuredData.forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => this._flattenNode(node, 0, resultNodes, [])));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     * @param {?} nodes\n     * @param {?} treeControl\n     * @return {?}\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        /** @type {?} */\n        let results = [];\n        /** @type {?} */\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => {\n            /** @type {?} */\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        }));\n        return results;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatTreeFlattener.prototype.transformFunction;\n    /** @type {?} */\n    MatTreeFlattener.prototype.getLevel;\n    /** @type {?} */\n    MatTreeFlattener.prototype.isExpandable;\n    /** @type {?} */\n    MatTreeFlattener.prototype.getChildren;\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n * @template T, F\n */\nclass MatTreeFlatDataSource extends DataSource {\n    /**\n     * @param {?} _treeControl\n     * @param {?} _treeFlattener\n     * @param {?=} initialData\n     */\n    constructor(_treeControl, _treeFlattener, initialData = []) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject(initialData);\n    }\n    /**\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    connect(collectionViewer) {\n        /** @type {?} */\n        const changes = [\n            collectionViewer.viewChange,\n            this._treeControl.expansionModel.changed,\n            this._flattenedData\n        ];\n        return merge(...changes).pipe(map((/**\n         * @return {?}\n         */\n        () => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        })));\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() {\n        // no op\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatTreeFlatDataSource.prototype._flattenedData;\n    /** @type {?} */\n    MatTreeFlatDataSource.prototype._expandedData;\n    /** @type {?} */\n    MatTreeFlatDataSource.prototype._data;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTreeFlatDataSource.prototype._treeControl;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTreeFlatDataSource.prototype._treeFlattener;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/data-source/nested-data-source.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n * @template T\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) { this._data.next(value); }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map((/**\n         * @return {?}\n         */\n        () => {\n            return this.data;\n        })));\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() {\n        // no op\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatTreeNestedDataSource.prototype._data;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\n\n//# sourceMappingURL=tree.js.map","import { SelectionModel } from '@angular/cdk/collections';\r\nimport { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { Component, Injectable } from '@angular/core';\r\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n\r\nexport class TodoItemNode {\r\n    children: TodoItemNode[];\r\n    item: string;\r\n}\r\n\r\n/** Flat to-do item node with expandable and level information */\r\nexport class TodoItemFlatNode {\r\n    item: string;\r\n    level: number;\r\n    expandable: boolean;\r\n}\r\n\r\n/**\r\n * The Json object for to-do list data.\r\n */\r\nconst TREE_DATA = {\r\n    Groceries: {\r\n        'Almond Meal flour': null,\r\n        'Organic eggs': null,\r\n        'Protein Powder': null,\r\n        Fruits: {\r\n            Apple: null,\r\n            Berries: ['Blueberry', 'Raspberry'],\r\n            Orange: null\r\n        }\r\n    },\r\n    Reminders: [\r\n        'Cook dinner',\r\n        'Read the Material Design spec',\r\n        'Upgrade Application to Angular'\r\n    ]\r\n};\r\n\r\n/**\r\n * Checklist database, it can build a tree structured Json object.\r\n * Each node in Json object represents a to-do item or a category.\r\n * If a node is a category, it has children items and new items can be added under the category.\r\n */\r\n@Injectable()\r\nexport class ChecklistDatabase {\r\n    dataChange = new BehaviorSubject<TodoItemNode[]>([]);\r\n\r\n    get data(): TodoItemNode[] { return this.dataChange.value; }\r\n\r\n    constructor() {\r\n        this.initialize();\r\n    }\r\n\r\n    initialize() {\r\n        // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\r\n        //     file node as children.\r\n        const data = this.buildFileTree(TREE_DATA, 0);\r\n\r\n        // Notify the change.\r\n        this.dataChange.next(data);\r\n    }\r\n\r\n    /**\r\n     * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\r\n     * The return value is the list of `TodoItemNode`.\r\n     */\r\n    buildFileTree(obj: { [key: string]: any }, level: number): TodoItemNode[] {\r\n        return Object.keys(obj).reduce<TodoItemNode[]>((accumulator, key) => {\r\n            const value = obj[key];\r\n            const node = new TodoItemNode();\r\n            node.item = key;\r\n\r\n            if (value != null) {\r\n                if (typeof value === 'object') {\r\n                    node.children = this.buildFileTree(value, level + 1);\r\n                } else {\r\n                    node.item = value;\r\n                }\r\n            }\r\n\r\n            return accumulator.concat(node);\r\n        }, []);\r\n    }\r\n\r\n    /** Add an item to to-do list */\r\n    insertItem(parent: TodoItemNode, name: string) {\r\n        if (parent.children) {\r\n            parent.children.push({ item: name } as TodoItemNode);\r\n            this.dataChange.next(this.data);\r\n        }\r\n    }\r\n\r\n    updateItem(node: TodoItemNode, name: string) {\r\n        node.item = name;\r\n        this.dataChange.next(this.data);\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'app-check-tree',\r\n    templateUrl: './check-tree.component.html',\r\n    styleUrls: ['./check-tree.component.scss'],\r\n    providers: [ChecklistDatabase]\r\n})\r\nexport class ChecktreeComponent {\r\n\r\n    flatNodeMap = new Map<TodoItemFlatNode, TodoItemNode>();\r\n\r\n    /** Map from nested node to flattened node. This helps us to keep the same object for selection */\r\n    nestedNodeMap = new Map<TodoItemNode, TodoItemFlatNode>();\r\n\r\n    /** A selected parent node to be inserted */\r\n    selectedParent: TodoItemFlatNode | null = null;\r\n\r\n    /** The new item's name */\r\n    newItemName = '';\r\n\r\n    treeControl: FlatTreeControl<TodoItemFlatNode>;\r\n\r\n    treeFlattener: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;\r\n\r\n    dataSource: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;\r\n\r\n    /** The selection for checklist */\r\n    checklistSelection = new SelectionModel<TodoItemFlatNode>(true /* multiple */);\r\n\r\n    constructor(private _database: ChecklistDatabase) {\r\n        this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,\r\n            this.isExpandable, this.getChildren);\r\n        this.treeControl = new FlatTreeControl<TodoItemFlatNode>(this.getLevel, this.isExpandable);\r\n        this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n\r\n        _database.dataChange.subscribe(data => {\r\n            this.dataSource.data = data;\r\n        });\r\n    }\r\n\r\n    getLevel = (node: TodoItemFlatNode) => node.level;\r\n\r\n    isExpandable = (node: TodoItemFlatNode) => node.expandable;\r\n\r\n    getChildren = (node: TodoItemNode): TodoItemNode[] => node.children;\r\n\r\n    hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\r\n\r\n    hasNoContent = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.item === '';\r\n\r\n    /**\r\n     * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\r\n     */\r\n    transformer = (node: TodoItemNode, level: number) => {\r\n        const existingNode = this.nestedNodeMap.get(node);\r\n        const flatNode = existingNode && existingNode.item === node.item\r\n            ? existingNode\r\n            : new TodoItemFlatNode();\r\n        flatNode.item = node.item;\r\n        flatNode.level = level;\r\n        flatNode.expandable = !!node.children;\r\n        this.flatNodeMap.set(flatNode, node);\r\n        this.nestedNodeMap.set(node, flatNode);\r\n        return flatNode;\r\n    }\r\n\r\n    /** Whether all the descendants of the node are selected. */\r\n    descendantsAllSelected(node: TodoItemFlatNode): boolean {\r\n        const descendants = this.treeControl.getDescendants(node);\r\n        const descAllSelected = descendants.every(child =>\r\n            this.checklistSelection.isSelected(child)\r\n        );\r\n        return descAllSelected;\r\n    }\r\n\r\n    /** Whether part of the descendants are selected */\r\n    descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\r\n        const descendants = this.treeControl.getDescendants(node);\r\n        const result = descendants.some(child => this.checklistSelection.isSelected(child));\r\n        return result && !this.descendantsAllSelected(node);\r\n    }\r\n\r\n    /** Toggle the to-do item selection. Select/deselect all the descendants node */\r\n    todoItemSelectionToggle(node: TodoItemFlatNode): void {\r\n        this.checklistSelection.toggle(node);\r\n        const descendants = this.treeControl.getDescendants(node);\r\n        this.checklistSelection.isSelected(node)\r\n            ? this.checklistSelection.select(...descendants)\r\n            : this.checklistSelection.deselect(...descendants);\r\n\r\n        // Force update for the parent\r\n        descendants.every(child =>\r\n            this.checklistSelection.isSelected(child)\r\n        );\r\n        this.checkAllParentsSelection(node);\r\n    }\r\n\r\n    /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\r\n    todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {\r\n        this.checklistSelection.toggle(node);\r\n        this.checkAllParentsSelection(node);\r\n    }\r\n\r\n    /* Checks all the parents when a leaf node is selected/unselected */\r\n    checkAllParentsSelection(node: TodoItemFlatNode): void {\r\n        let parent: TodoItemFlatNode | null = this.getParentNode(node);\r\n        while (parent) {\r\n            this.checkRootNodeSelection(parent);\r\n            parent = this.getParentNode(parent);\r\n        }\r\n    }\r\n\r\n    /** Check root node checked state and change it accordingly */\r\n    checkRootNodeSelection(node: TodoItemFlatNode): void {\r\n        const nodeSelected = this.checklistSelection.isSelected(node);\r\n        const descendants = this.treeControl.getDescendants(node);\r\n        const descAllSelected = descendants.every(child =>\r\n            this.checklistSelection.isSelected(child)\r\n        );\r\n        if (nodeSelected && !descAllSelected) {\r\n            this.checklistSelection.deselect(node);\r\n        } else if (!nodeSelected && descAllSelected) {\r\n            this.checklistSelection.select(node);\r\n        }\r\n    }\r\n\r\n    /* Get the parent node of a node */\r\n    getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\r\n        const currentLevel = this.getLevel(node);\r\n\r\n        if (currentLevel < 1) {\r\n            return null;\r\n        }\r\n\r\n        const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\r\n\r\n        for (let i = startIndex; i >= 0; i--) {\r\n            const currentNode = this.treeControl.dataNodes[i];\r\n\r\n            if (this.getLevel(currentNode) < currentLevel) {\r\n                return currentNode;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** Select the category so we can insert the new item. */\r\n    addNewItem(node: TodoItemFlatNode) {\r\n        const parentNode = this.flatNodeMap.get(node);\r\n        this._database.insertItem(parentNode!, '');\r\n        this.treeControl.expand(node);\r\n    }\r\n\r\n    /** Save the node to database */\r\n    saveNode(node: TodoItemFlatNode, itemValue: string) {\r\n        const nestedNode = this.flatNodeMap.get(node);\r\n        this._database.updateItem(nestedNode!, itemValue);\r\n    }\r\n}\r\n","<mat-card>\r\n    <mat-card-content>\r\n        <mat-card-title>Tree with checkboxes</mat-card-title>\r\n        <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n            <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle matTreeNodePadding>\r\n                <button mat-icon-button disabled></button>\r\n                <mat-checkbox class=\"checklist-leaf-node\" [checked]=\"checklistSelection.isSelected(node)\"\r\n                    (change)=\"todoLeafItemSelectionToggle(node)\">{{node.item}}</mat-checkbox>\r\n            </mat-tree-node>\r\n\r\n            <mat-tree-node *matTreeNodeDef=\"let node; when: hasNoContent\" matTreeNodePadding>\r\n                <button mat-icon-button disabled></button>\r\n                <mat-form-field>\r\n                    <mat-label>New item...</mat-label>\r\n                    <input matInput #itemValue placeholder=\"Ex. Lettuce\">\r\n                </mat-form-field>\r\n                <button mat-button (click)=\"saveNode(node, itemValue.value)\">Save</button>\r\n            </mat-tree-node>\r\n\r\n            <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\r\n                <button mat-icon-button matTreeNodeToggle [attr.aria-label]=\"'toggle ' + node.filename\">\r\n                    <mat-icon class=\"mat-icon-rtl-mirror\">\r\n                        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n                    </mat-icon>\r\n                </button>\r\n                <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\r\n                    [indeterminate]=\"descendantsPartiallySelected(node)\" (change)=\"todoItemSelectionToggle(node)\">\r\n                    {{node.item}}</mat-checkbox>\r\n                <button mat-icon-button (click)=\"addNewItem(node)\">\r\n                    <mat-icon>add</mat-icon>\r\n                </button>\r\n            </mat-tree-node>\r\n        </mat-tree>\r\n    </mat-card-content>\r\n</mat-card>","import { CollectionViewer, SelectionChange, DataSource } from '@angular/cdk/collections';\r\nimport { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { Component, Injectable } from '@angular/core';\r\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport class DynamicFlatNode {\r\n    constructor(public item: string, public level = 1, public expandable = false,\r\n        public isLoading = false) { }\r\n}\r\n\r\n/**\r\n * Database for dynamic data. When expanding a node in the tree, the data source will need to fetch\r\n * the descendants data from the database.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class DynamicDatabase {\r\n    dataMap = new Map<string, string[]>([\r\n        ['Fruits', ['Apple', 'Orange', 'Banana']],\r\n        ['Vegetables', ['Tomato', 'Potato', 'Onion']],\r\n        ['Apple', ['Fuji', 'Macintosh']],\r\n        ['Onion', ['Yellow', 'White', 'Purple']]\r\n    ]);\r\n\r\n    rootLevelNodes: string[] = ['Fruits', 'Vegetables'];\r\n\r\n    /** Initial data from database */\r\n    initialData(): DynamicFlatNode[] {\r\n        return this.rootLevelNodes.map(name => new DynamicFlatNode(name, 0, true));\r\n    }\r\n\r\n    getChildren(node: string): string[] | undefined {\r\n        return this.dataMap.get(node);\r\n    }\r\n\r\n    isExpandable(node: string): boolean {\r\n        return this.dataMap.has(node);\r\n    }\r\n}\r\n/**\r\n * File database, it can build a tree structured Json object from string.\r\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\r\n * For a directory, it has filename and children (a list of files or directories).\r\n * The input will be a json object string, and the output is a list of `FileNode` with nested\r\n * structure.\r\n */\r\nexport class DynamicDataSource implements DataSource<DynamicFlatNode> {\r\n\r\n    dataChange = new BehaviorSubject<DynamicFlatNode[]>([]);\r\n\r\n    get data(): DynamicFlatNode[] { return this.dataChange.value; }\r\n    set data(value: DynamicFlatNode[]) {\r\n        this._treeControl.dataNodes = value;\r\n        this.dataChange.next(value);\r\n    }\r\n\r\n    constructor(private _treeControl: FlatTreeControl<DynamicFlatNode>,\r\n        private _database: DynamicDatabase) { }\r\n\r\n    connect(collectionViewer: CollectionViewer): Observable<DynamicFlatNode[]> {\r\n        this._treeControl.expansionModel.changed.subscribe(change => {\r\n            if ((change as SelectionChange<DynamicFlatNode>).added ||\r\n                (change as SelectionChange<DynamicFlatNode>).removed) {\r\n                this.handleTreeControl(change as SelectionChange<DynamicFlatNode>);\r\n            }\r\n        });\r\n\r\n        return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\r\n    }\r\n\r\n    disconnect(collectionViewer: CollectionViewer): void { }\r\n\r\n    /** Handle expand/collapse behaviors */\r\n    handleTreeControl(change: SelectionChange<DynamicFlatNode>) {\r\n        if (change.added) {\r\n            change.added.forEach(node => this.toggleNode(node, true));\r\n        }\r\n        if (change.removed) {\r\n            change.removed.slice().reverse().forEach(node => this.toggleNode(node, false));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Toggle the node, remove from display list\r\n     */\r\n    toggleNode(node: DynamicFlatNode, expand: boolean) {\r\n        const children = this._database.getChildren(node.item);\r\n        const index = this.data.indexOf(node);\r\n        if (!children || index < 0) { // If no children, or cannot find the node, no op\r\n            return;\r\n        }\r\n\r\n        node.isLoading = true;\r\n\r\n        setTimeout(() => {\r\n            if (expand) {\r\n                const nodes = children.map(name =>\r\n                    new DynamicFlatNode(name, node.level + 1, this._database.isExpandable(name)));\r\n                this.data.splice(index + 1, 0, ...nodes);\r\n            } else {\r\n                let count = 0;\r\n                for (let i = index + 1; i < this.data.length\r\n                    && this.data[i].level > node.level; i++ , count++) { }\r\n                this.data.splice(index + 1, count);\r\n            }\r\n\r\n            // notify the change\r\n            this.dataChange.next(this.data);\r\n            node.isLoading = false;\r\n        }, 1000);\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'app-dynamic-tree',\r\n    templateUrl: './dynamic-tree.component.html',\r\n    styleUrls: ['./dynamic-tree.component.scss']\r\n})\r\nexport class DynamictreeComponent {\r\n\r\n    constructor(database: DynamicDatabase) {\r\n        this.treeControl = new FlatTreeControl<DynamicFlatNode>(this.getLevel, this.isExpandable);\r\n        this.dataSource = new DynamicDataSource(this.treeControl, database);\r\n\r\n        this.dataSource.data = database.initialData();\r\n    }\r\n\r\n    treeControl: FlatTreeControl<DynamicFlatNode>;\r\n\r\n    dataSource: DynamicDataSource;\r\n\r\n    getLevel = (node: DynamicFlatNode) => node.level;\r\n\r\n    isExpandable = (node: DynamicFlatNode) => node.expandable;\r\n\r\n    hasChild = (_: number, _nodeData: DynamicFlatNode) => _nodeData.expandable;\r\n}\r\n","<mat-card>\r\n    <mat-card-content>\r\n        <mat-card-title>Tree with dynamic data</mat-card-title>\r\n        <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n            <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\r\n                <button mat-icon-button disabled></button>\r\n                {{node.item}}\r\n            </mat-tree-node>\r\n            <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\r\n                <button mat-icon-button [attr.aria-label]=\"'toggle ' + node.filename\" matTreeNodeToggle>\r\n                    <mat-icon class=\"mat-icon-rtl-mirror\">\r\n                        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n                    </mat-icon>\r\n                </button>\r\n                {{node.item}}\r\n                <mat-progress-bar *ngIf=\"node.isLoading\" mode=\"indeterminate\" class=\"example-tree-progress-bar\">\r\n                </mat-progress-bar>\r\n            </mat-tree-node>\r\n        </mat-tree>\r\n    </mat-card-content>\r\n</mat-card>","import { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { Component } from '@angular/core';\r\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\r\n\r\ninterface FoodNode {\r\n    name: string;\r\n    children?: FoodNode[];\r\n}\r\n\r\nconst TREE_DATA: FoodNode[] = [\r\n    {\r\n        name: 'Fruit',\r\n        children: [\r\n            { name: 'Apple' },\r\n            { name: 'Banana' },\r\n            { name: 'Fruit loops' },\r\n        ]\r\n    }, {\r\n        name: 'Vegetables',\r\n        children: [\r\n            {\r\n                name: 'Green',\r\n                children: [\r\n                    { name: 'Broccoli' },\r\n                    { name: 'Brussels sprouts' },\r\n                ]\r\n            }, {\r\n                name: 'Orange',\r\n                children: [\r\n                    { name: 'Pumpkins' },\r\n                    { name: 'Carrots' },\r\n                ]\r\n            },\r\n        ]\r\n    },\r\n];\r\n\r\n/** Flat node with expandable and level information */\r\ninterface ExampleFlatNode {\r\n    expandable: boolean;\r\n    name: string;\r\n    level: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-flat-tree',\r\n    templateUrl: './flat-tree.component.html',\r\n    styleUrls: ['./flat-tree.component.scss']\r\n})\r\nexport class FlattreeComponent {\r\n\r\n    private _transformer = (node: FoodNode, level: number) => {\r\n        return {\r\n            expandable: !!node.children && node.children.length > 0,\r\n            name: node.name,\r\n            level: level,\r\n        };\r\n    }\r\n\r\n    treeControl = new FlatTreeControl<ExampleFlatNode>(\r\n        node => node.level, node => node.expandable);\r\n\r\n    treeFlattener = new MatTreeFlattener(\r\n        this._transformer, node => node.level, node => node.expandable, node => node.children);\r\n\r\n    dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n\r\n    constructor() {\r\n        this.dataSource.data = TREE_DATA;\r\n    }\r\n\r\n    hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\r\n}\r\n","<mat-card>\r\n    <mat-card-content>\r\n        <mat-card-title>Tree with flat nodes</mat-card-title>\r\n        <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n            <!-- This is the tree node template for leaf nodes -->\r\n            <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\r\n                <!-- use a disabled button to provide padding for tree leaf -->\r\n                <button mat-icon-button disabled></button>\r\n                {{node.name}}\r\n            </mat-tree-node>\r\n            <!-- This is the tree node template for expandable nodes -->\r\n            <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding>\r\n                <button mat-icon-button matTreeNodeToggle [attr.aria-label]=\"'toggle ' + node.name\">\r\n                    <mat-icon class=\"mat-icon-rtl-mirror\">\r\n                        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n                    </mat-icon>\r\n                </button>\r\n                {{node.name}}\r\n            </mat-tree-node>\r\n        </mat-tree>\r\n    </mat-card-content>\r\n</mat-card>","import { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { Component, Injectable } from '@angular/core';\r\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n\r\nconst LOAD_MORE = 'LOAD_MORE';\r\n\r\n/** Nested node */\r\nexport class LoadmoreNode {\r\n    childrenChange = new BehaviorSubject<LoadmoreNode[]>([]);\r\n\r\n    get children(): LoadmoreNode[] {\r\n        return this.childrenChange.value;\r\n    }\r\n\r\n    constructor(public item: string,\r\n        public hasChildren = false,\r\n        public loadMoreParentItem: string | null = null) { }\r\n}\r\n\r\n/** Flat node with expandable and level information */\r\nexport class LoadmoreFlatNode {\r\n    constructor(public item: string,\r\n        public level = 1,\r\n        public expandable = false,\r\n        public loadMoreParentItem: string | null = null) { }\r\n}\r\n\r\n/**\r\n * A database that only load part of the data initially. After user clicks on the `Load more`\r\n * button, more data will be loaded.\r\n */\r\n@Injectable()\r\nexport class LoadmoreDatabase {\r\n    batchNumber = 5;\r\n    dataChange = new BehaviorSubject<LoadmoreNode[]>([]);\r\n    nodeMap = new Map<string, LoadmoreNode>();\r\n\r\n    /** The data */\r\n    rootLevelNodes: string[] = ['Vegetables', 'Fruits'];\r\n    dataMap = new Map<string, string[]>([\r\n        ['Fruits', ['Apple', 'Orange', 'Banana']],\r\n        ['Vegetables', ['Tomato', 'Potato', 'Onion']],\r\n        ['Apple', ['Fuji', 'Macintosh']],\r\n        ['Onion', ['Yellow', 'White', 'Purple', 'Green', 'Shallot', 'Sweet', 'Red', 'Leek']],\r\n    ]);\r\n\r\n    initialize() {\r\n        const data = this.rootLevelNodes.map(name => this._generateNode(name));\r\n        this.dataChange.next(data);\r\n    }\r\n\r\n    /** Expand a node whose children are not loaded */\r\n    loadMore(item: string, onlyFirstTime = false) {\r\n        if (!this.nodeMap.has(item) || !this.dataMap.has(item)) {\r\n            return;\r\n        }\r\n        const parent = this.nodeMap.get(item)!;\r\n        const children = this.dataMap.get(item)!;\r\n        if (onlyFirstTime && parent.children!.length > 0) {\r\n            return;\r\n        }\r\n        const newChildrenNumber = parent.children!.length + this.batchNumber;\r\n        const nodes = children.slice(0, newChildrenNumber)\r\n            .map(name => this._generateNode(name));\r\n        if (newChildrenNumber < children.length) {\r\n            // Need a new load more node\r\n            nodes.push(new LoadmoreNode(LOAD_MORE, false, item));\r\n        }\r\n\r\n        parent.childrenChange.next(nodes);\r\n        this.dataChange.next(this.dataChange.value);\r\n    }\r\n\r\n    private _generateNode(item: string): LoadmoreNode {\r\n        if (this.nodeMap.has(item)) {\r\n            return this.nodeMap.get(item)!;\r\n        }\r\n        const result = new LoadmoreNode(item, this.dataMap.has(item));\r\n        this.nodeMap.set(item, result);\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\n@Component({\r\n    selector: 'app-load-tree',\r\n    templateUrl: './load-tree.component.html',\r\n    styleUrls: ['./load-tree.component.scss'],\r\n    providers: [LoadmoreDatabase]\r\n})\r\nexport class LoadtreeComponent {\r\n\r\n    nodeMap = new Map<string, LoadmoreFlatNode>();\r\n    treeControl: FlatTreeControl<LoadmoreFlatNode>;\r\n    treeFlattener: MatTreeFlattener<LoadmoreNode, LoadmoreFlatNode>;\r\n    // Flat tree data source\r\n    dataSource: MatTreeFlatDataSource<LoadmoreNode, LoadmoreFlatNode>;\r\n\r\n    constructor(private _database: LoadmoreDatabase) {\r\n        this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,\r\n            this.isExpandable, this.getChildren);\r\n\r\n        this.treeControl = new FlatTreeControl<LoadmoreFlatNode>(this.getLevel, this.isExpandable);\r\n\r\n        this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n\r\n        _database.dataChange.subscribe(data => {\r\n            this.dataSource.data = data;\r\n        });\r\n\r\n        _database.initialize();\r\n    }\r\n\r\n    getChildren = (node: LoadmoreNode): Observable<LoadmoreNode[]> => node.childrenChange;\r\n\r\n    transformer = (node: LoadmoreNode, level: number) => {\r\n        const existingNode = this.nodeMap.get(node.item);\r\n\r\n        if (existingNode) {\r\n            return existingNode;\r\n        }\r\n\r\n        const newNode =\r\n            new LoadmoreFlatNode(node.item, level, node.hasChildren, node.loadMoreParentItem);\r\n        this.nodeMap.set(node.item, newNode);\r\n        return newNode;\r\n    }\r\n\r\n    getLevel = (node: LoadmoreFlatNode) => node.level;\r\n\r\n    isExpandable = (node: LoadmoreFlatNode) => node.expandable;\r\n\r\n    hasChild = (_: number, _nodeData: LoadmoreFlatNode) => _nodeData.expandable;\r\n\r\n    isLoadMore = (_: number, _nodeData: LoadmoreFlatNode) => _nodeData.item === LOAD_MORE;\r\n\r\n    /** Load more nodes from data source */\r\n    loadMore(item: string) {\r\n        this._database.loadMore(item);\r\n    }\r\n\r\n    loadChildren(node: LoadmoreFlatNode) {\r\n        this._database.loadMore(node.item, true);\r\n    }\r\n}\r\n","<mat-card>\r\n    <mat-card-content>\r\n        <mat-card-title>Tree with partially loaded data</mat-card-title>\r\n        <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n            <!-- Leaf node -->\r\n            <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\r\n                <button mat-icon-button disabled></button>\r\n                {{node.item}}\r\n            </mat-tree-node>\r\n\r\n            <!-- expandable node -->\r\n            <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\r\n                <button mat-icon-button [attr.aria-label]=\"'toggle ' + node.filename\" (click)=\"loadChildren(node)\"\r\n                    matTreeNodeToggle>\r\n                    <mat-icon class=\"mat-icon-rtl-mirror\">\r\n                        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n                    </mat-icon>\r\n                </button>\r\n                {{node.item}}\r\n            </mat-tree-node>\r\n\r\n            <mat-tree-node *matTreeNodeDef=\"let node; when: isLoadMore\">\r\n                <button mat-button (click)=\"loadMore(node.loadMoreParentItem)\">\r\n                    Load more...\r\n                </button>\r\n            </mat-tree-node>\r\n        </mat-tree>\r\n    </mat-card-content>\r\n</mat-card>","import { NestedTreeControl } from '@angular/cdk/tree';\r\nimport { Component } from '@angular/core';\r\nimport { MatTreeNestedDataSource } from '@angular/material/tree';\r\n\r\n/**\r\n * Food data with nested structure.\r\n * Each node has a name and an optional list of children.\r\n */\r\ninterface FoodNode {\r\n    name: string;\r\n    children?: FoodNode[];\r\n}\r\n\r\nconst TREE_DATA: FoodNode[] = [\r\n    {\r\n        name: 'Fruit',\r\n        children: [\r\n            { name: 'Apple' },\r\n            { name: 'Banana' },\r\n            { name: 'Fruit loops' },\r\n        ]\r\n    }, {\r\n        name: 'Vegetables',\r\n        children: [\r\n            {\r\n                name: 'Green',\r\n                children: [\r\n                    { name: 'Broccoli' },\r\n                    { name: 'Brussels sprouts' },\r\n                ]\r\n            }, {\r\n                name: 'Orange',\r\n                children: [\r\n                    { name: 'Pumpkins' },\r\n                    { name: 'Carrots' },\r\n                ]\r\n            },\r\n        ]\r\n    },\r\n];\r\n\r\n\r\n@Component({\r\n    selector: 'app-nested-tree',\r\n    templateUrl: './nested-tree.component.html',\r\n    styleUrls: ['./nested-tree.component.scss']\r\n})\r\nexport class NestedtreeComponent {\r\n\r\n    treeControl = new NestedTreeControl<FoodNode>(node => node.children);\r\n    dataSource = new MatTreeNestedDataSource<FoodNode>();\r\n\r\n    constructor() {\r\n        this.dataSource.data = TREE_DATA;\r\n    }\r\n\r\n    hasChild = (_: number, node: FoodNode) => !!node.children && node.children.length > 0;\r\n}\r\n","<mat-card>\r\n    <mat-card-content>\r\n        <mat-card-title>Tree with nested nodes</mat-card-title>\r\n        <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" class=\"example-tree\">\r\n            <!-- This is the tree node template for leaf nodes -->\r\n            <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle>\r\n                <li class=\"mat-tree-node\">\r\n                    <!-- use a disabled button to provide padding for tree leaf -->\r\n                    <button mat-icon-button disabled></button>\r\n                    {{node.name}}\r\n                </li>\r\n            </mat-tree-node>\r\n            <!-- This is the tree node template for expandable nodes -->\r\n            <mat-nested-tree-node *matTreeNodeDef=\"let node; when: hasChild\">\r\n                <li>\r\n                    <div class=\"mat-tree-node\">\r\n                        <button mat-icon-button matTreeNodeToggle [attr.aria-label]=\"'toggle ' + node.name\">\r\n                            <mat-icon class=\"mat-icon-rtl-mirror\">\r\n                                {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n                            </mat-icon>\r\n                        </button>\r\n                        {{node.name}}\r\n                    </div>\r\n                    <ul [class.example-tree-invisible]=\"!treeControl.isExpanded(node)\">\r\n                        <ng-container matTreeNodeOutlet></ng-container>\r\n                    </ul>\r\n                </li>\r\n            </mat-nested-tree-node>\r\n        </mat-tree>\r\n    </mat-card-content>\r\n</mat-card>","import 'hammerjs';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DemoMaterialModule } from '../demo-material-module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { TreeRoutes } from './tree.routing';\r\n\r\n\r\nimport { ChecktreeComponent } from './check-tree/check-tree.component';\r\nimport { DynamictreeComponent } from './dynamic-tree/dynamic-tree.component';\r\nimport { FlattreeComponent } from './flat-tree/flat-tree.component';\r\nimport { LoadtreeComponent } from './load-tree/load-tree.component';\r\nimport { NestedtreeComponent } from './nested-tree/nested-tree.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        RouterModule.forChild(TreeRoutes),\r\n        DemoMaterialModule,\r\n        FlexLayoutModule,\r\n        FormsModule,\r\n        MatTreeModule,\r\n        ReactiveFormsModule\r\n    ],\r\n    declarations: [\r\n        ChecktreeComponent,\r\n        DynamictreeComponent,\r\n        FlattreeComponent,\r\n        LoadtreeComponent,\r\n        NestedtreeComponent\r\n    ]\r\n})\r\nexport class TreeModule { }\r\n","import { Routes } from '@angular/router';\r\n\r\nimport { ChecktreeComponent } from './check-tree/check-tree.component';\r\nimport { DynamictreeComponent } from './dynamic-tree/dynamic-tree.component';\r\nimport { FlattreeComponent } from './flat-tree/flat-tree.component';\r\nimport { LoadtreeComponent } from './load-tree/load-tree.component';\r\nimport { NestedtreeComponent } from './nested-tree/nested-tree.component';\r\n\r\nexport const TreeRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        children: [\r\n            {\r\n                path: 'check-tree',\r\n                component: ChecktreeComponent,\r\n                data: {\r\n                    title: 'Checkbox with tree',\r\n                    urls: [\r\n                        { title: 'Dashboard', url: '/dashboard' },\r\n                        { title: 'Checkbox with tree' }\r\n                    ]\r\n                }\r\n            },\r\n            {\r\n                path: 'dynamic-tree',\r\n                component: DynamictreeComponent,\r\n                data: {\r\n                    title: 'Dynamic Data with tree',\r\n                    urls: [\r\n                        { title: 'Dashboard', url: '/dashboard' },\r\n                        { title: 'Dynamic Data with tree' }\r\n                    ]\r\n                }\r\n            },\r\n            {\r\n                path: 'flat-tree',\r\n                component: FlattreeComponent,\r\n                data: {\r\n                    title: 'Flat Data with Tree',\r\n                    urls: [\r\n                        { title: 'Dashboard', url: '/dashboard' },\r\n                        { title: 'Flat Data with Tree' }\r\n                    ]\r\n                }\r\n            },\r\n            {\r\n                path: 'load-tree',\r\n                component: LoadtreeComponent,\r\n                data: {\r\n                    title: 'Loaded Data with Tree',\r\n                    urls: [\r\n                        { title: 'Dashboard', url: '/dashboard' },\r\n                        { title: 'Loaded Data with Tree' }\r\n                    ]\r\n                }\r\n            },\r\n            {\r\n                path: 'nested-tree',\r\n                component: NestedtreeComponent,\r\n                data: {\r\n                    title: 'Nested Tree',\r\n                    urls: [\r\n                        { title: 'Dashboard', url: '/dashboard' },\r\n                        { title: 'Nested Tree' }\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    }\r\n];\r\n"]}